{"ast":null,"code":"var _jsxFileName = \"/Users/ryanmorrison/Code/narrativeforge/src/components/SocialMediaMessage.js\";\nimport React from 'react';\n\n/**\n * Component for rendering social media messages in a platform-specific format\n * \n * @param {Object} props - Component props\n * @param {string} props.content - The social media content to render\n * @returns {JSX.Element} - Rendered social media message\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocialMediaMessage = ({\n  content\n}) => {\n  if (!content || typeof content !== 'string') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"social-media-content\",\n      children: \"Invalid content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Split the content by double line breaks to separate platforms\n  const sections = content.split(/\\n\\s*\\n\\s*\\n/);\n\n  // Platform-specific styling information\n  const platformStyles = {\n    'Instagram': {\n      className: 'instagram-notification',\n      icon: '📱',\n      color: '#C13584'\n    },\n    'TikTok': {\n      className: 'tiktok-notification',\n      icon: '🎵',\n      color: '#25F4EE'\n    },\n    'YouTube': {\n      className: 'youtube-notification',\n      icon: '▶️',\n      color: '#FF0000'\n    },\n    'Twitter': {\n      className: 'twitter-notification',\n      icon: '🐦',\n      color: '#1DA1F2'\n    },\n    'Snapchat': {\n      className: 'snapchat-notification',\n      icon: '👻',\n      color: '#FFFC00'\n    }\n  };\n\n  // Process each section and determine if it has a platform marker\n  const platformSections = [];\n  sections.forEach((section, index) => {\n    const platformMatch = section.match(/\\[PLATFORM:(\\w+)\\]/);\n    const platform = platformMatch ? platformMatch[1] : null;\n\n    // Remove platform marker from content\n    let sectionContent = platformMatch ? section.replace(/\\[PLATFORM:\\w+\\]\\s*[\\ud83d\\udcf1\\ud83c\\udfb5\\u25b6\\ufe0f\\ud83d\\udc26\\ud83d\\udc7b]\\s*\\w+\\s*/, '') : section;\n\n    // Split the remaining content into lines\n    const lines = sectionContent.split(/\\n/).filter(line => line.trim() !== '');\n\n    // Format each line\n    const formattedLines = lines.map(line => formatLine(line));\n\n    // Get the styling for this platform\n    const style = platform && platformStyles[platform] ? platformStyles[platform] : {\n      className: 'generic-notification',\n      icon: '📱',\n      color: '#808080'\n    };\n\n    // Create platform section\n    platformSections.push(/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `platform-section ${platform ? style.className : 'generic-notification'}`,\n      style: platform ? {\n        borderLeftColor: style.color\n      } : {},\n      children: [platform && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"platform-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"platform-icon\",\n          children: style.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"platform-name\",\n          children: platform\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"platform-content\",\n        children: formattedLines.map((line, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-line\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: line\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)\n        }, `notification-${index}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, `platform-${index}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"social-media-content\",\n    children: platformSections\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 10\n  }, this);\n};\n\n/**\n * Format a line of content with HTML styling\n * \n * @param {string} line - The line to format\n * @returns {string} - HTML formatted line\n */\n_c = SocialMediaMessage;\nfunction formatLine(line) {\n  if (!line || typeof line !== 'string') return '';\n  return line\n  // Format handles with styling\n  .replace(/@([a-zA-Z0-9_]+)/g, '<span class=\"handle\">@$1</span>')\n  // Format quotes\n  .replace(/\"([^\"]+)\"/g, '<span class=\"quote\">\"$1\"</span>')\n  // Format keywords\n  .replace(/\\b(viral|followers|views|likes|comments|shares)\\b/gi, '<span class=\"highlight\">$1</span>')\n  // Preserve existing HTML markup\n  .replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n}\nexport default SocialMediaMessage;\nvar _c;\n$RefreshReg$(_c, \"SocialMediaMessage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SocialMediaMessage","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","sections","split","platformStyles","icon","color","platformSections","forEach","section","index","platformMatch","match","platform","sectionContent","replace","lines","filter","line","trim","formattedLines","map","formatLine","style","push","borderLeftColor","j","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["/Users/ryanmorrison/Code/narrativeforge/src/components/SocialMediaMessage.js"],"sourcesContent":["import React from 'react';\n\n/**\n * Component for rendering social media messages in a platform-specific format\n * \n * @param {Object} props - Component props\n * @param {string} props.content - The social media content to render\n * @returns {JSX.Element} - Rendered social media message\n */\nconst SocialMediaMessage = ({ content }) => {\n  if (!content || typeof content !== 'string') {\n    return <div className=\"social-media-content\">Invalid content</div>;\n  }\n  \n  // Split the content by double line breaks to separate platforms\n  const sections = content.split(/\\n\\s*\\n\\s*\\n/);\n  \n  // Platform-specific styling information\n  const platformStyles = {\n    'Instagram': {\n      className: 'instagram-notification',\n      icon: '📱',\n      color: '#C13584'\n    },\n    'TikTok': {\n      className: 'tiktok-notification',\n      icon: '🎵',\n      color: '#25F4EE'\n    },\n    'YouTube': {\n      className: 'youtube-notification',\n      icon: '▶️',\n      color: '#FF0000'\n    },\n    'Twitter': {\n      className: 'twitter-notification',\n      icon: '🐦',\n      color: '#1DA1F2'\n    },\n    'Snapchat': {\n      className: 'snapchat-notification',\n      icon: '👻',\n      color: '#FFFC00'\n    }\n  };\n  \n  // Process each section and determine if it has a platform marker\n  const platformSections = [];\n  \n  sections.forEach((section, index) => {\n    const platformMatch = section.match(/\\[PLATFORM:(\\w+)\\]/);\n    const platform = platformMatch ? platformMatch[1] : null;\n    \n    // Remove platform marker from content\n    let sectionContent = platformMatch ? \n      section.replace(/\\[PLATFORM:\\w+\\]\\s*[\\ud83d\\udcf1\\ud83c\\udfb5\\u25b6\\ufe0f\\ud83d\\udc26\\ud83d\\udc7b]\\s*\\w+\\s*/, '') :\n      section;\n    \n    // Split the remaining content into lines\n    const lines = sectionContent.split(/\\n/).filter(line => line.trim() !== '');\n    \n    // Format each line\n    const formattedLines = lines.map(line => formatLine(line));\n    \n    // Get the styling for this platform\n    const style = platform && platformStyles[platform] ? platformStyles[platform] : {\n      className: 'generic-notification',\n      icon: '📱',\n      color: '#808080'\n    };\n    \n    // Create platform section\n    platformSections.push(\n      <div \n        key={`platform-${index}`} \n        className={`platform-section ${platform ? style.className : 'generic-notification'}`}\n        style={platform ? { borderLeftColor: style.color } : {}}\n      >\n        {platform && (\n          <div className=\"platform-header\">\n            <span className=\"platform-icon\">{style.icon}</span>\n            <span className=\"platform-name\">{platform}</span>\n          </div>\n        )}\n        <div className=\"platform-content\">\n          {formattedLines.map((line, j) => (\n            <div key={`notification-${index}-${j}`} className=\"notification-line\">\n              <span dangerouslySetInnerHTML={{ __html: line }} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  });\n  \n  return <div className=\"social-media-content\">{platformSections}</div>;\n};\n\n/**\n * Format a line of content with HTML styling\n * \n * @param {string} line - The line to format\n * @returns {string} - HTML formatted line\n */\nfunction formatLine(line) {\n  if (!line || typeof line !== 'string') return '';\n  \n  return line\n    // Format handles with styling\n    .replace(/@([a-zA-Z0-9_]+)/g, '<span class=\"handle\">@$1</span>')\n    // Format quotes\n    .replace(/\"([^\"]+)\"/g, '<span class=\"quote\">\"$1\"</span>')\n    // Format keywords\n    .replace(/\\b(viral|followers|views|likes|comments|shares)\\b/gi, '<span class=\"highlight\">$1</span>')\n    // Preserve existing HTML markup\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>');\n}\n\nexport default SocialMediaMessage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}