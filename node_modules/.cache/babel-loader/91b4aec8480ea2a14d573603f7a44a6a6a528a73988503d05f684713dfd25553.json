{"ast":null,"code":"var _jsxFileName = \"/Users/ryanmorrison/Code/narrativeforge/src/components/SetupMode/QuickSetup.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { RefreshCw, FileText, Loader } from 'lucide-react';\n\n/**\n * QuickSetup - A streamlined setup component allowing users to input\n * all character and scenario details in a single text area\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuickSetup = ({\n  onSave,\n  geminiService,\n  onReset\n}) => {\n  _s();\n  const [setupText, setSetupText] = useState('');\n\n  // Sample content for quick setup\n  const sampleContent = `Character name: Alex Morgan\nCharacter age: 29\nPhysical description: Tall with dark brown hair often tied in a ponytail. Athletic build from years of running. Has a small scar above their right eyebrow from a childhood accident. Usually dresses in comfortable, practical clothing - jeans, fitted t-shirts, and a well-worn leather jacket.\n\nBackground: Grew up in a small coastal town before moving to the city for university. Studied journalism but dropped out in final year after uncovering corruption in the university administration. Now works as a freelance investigative journalist, specializing in environmental issues. Lives in a small apartment filled with books, plants, and collected souvenirs from travels.\n\nPersonality: Determined and persistent, sometimes to the point of obsession. Deeply loyal to friends but struggles to maintain romantic relationships due to workaholic tendencies. Values truth and justice above personal comfort. Has a dry sense of humor that emerges when comfortable. Tends to be suspicious of authority figures.\n\nRelationships: Has a complicated relationship with former mentor, James Chen, who now works for a major news corporation that Alex believes has compromised its integrity for corporate interests.\n\nScenario title: The Blackwater Files\n\nLocation: Blackwater Bay, a once-thriving fishing town now struggling after the opening of Meridian Chemical's processing plant on the outskirts\n\nTime: Present day, autumn, when the tourist season has ended and the town is quieter\n\nAtmosphere: Tense, mysterious, with an underlying sense of decay and secrecy\n\nInitial situation: You've returned to Blackwater Bay, your hometown, after receiving an anonymous tip about unusual illness patterns among residents. The local doctor who first noticed the trend, Dr. Eliza Hayes, was recently found dead in what officials ruled a suicide. Your source suggests otherwise and claims it's connected to the chemical plant. Upon arrival, you notice strange security measures at the plant and unusual resistance from town officials when you start asking questions.\n\nNarrative goals: Uncover the truth about Dr. Hayes' death and the potential environmental hazard, while navigating old relationships and new dangers in your hometown.\n\nTone and themes: Environmental justice, small-town secrets, corporate corruption, personal redemption, the cost of truth`;\n\n  // Function to load sample content\n  const loadSampleContent = () => {\n    setSetupText(sampleContent);\n  };\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingStatus, setProcessingStatus] = useState('');\n  const [processingError, setProcessingError] = useState(null);\n  const [parsedData, setParsedData] = useState(null);\n\n  // Process the text and try to extract character and scenario information\n  const processSetupText = async () => {\n    try {\n      setIsProcessing(true);\n      setProcessingStatus('Preparing to process your character and scenario...');\n      setProcessingError(null);\n      setParsedData(null);\n      if (!setupText.trim()) {\n        setProcessingError('Please enter some text before processing');\n        setIsProcessing(false);\n        return;\n      }\n\n      // Option 1: Use Gemini to parse the input if service is available\n      if (geminiService) {\n        setProcessingStatus('Creating AI prompt to extract character and scenario details...');\n        const prompt = `Extract character and scenario details from the following roleplay setup text. \n        \n        TEXT:\n        ${setupText}\n        \n        INSTRUCTIONS:\n        Return a valid JSON object containing two nested objects: 'character' and 'scenario'. Follow this exact structure:\n        \n        {\n          \"character\": {\n            \"name\": \"Character's name (extract or use 'Unnamed Character' if not found)\",\n            \"age\": \"Character's age (extract or use '25' if not found)\",\n            \"physicalDescription\": \"Character's physical description (extract or use empty string if not found)\",\n            \"background\": \"Character's background (extract or use empty string if not found)\",\n            \"personality\": \"Character's personality (extract or use empty string if not found)\",\n            \"relationships\": [\n              {\n                \"name\": \"Related character's name\",\n                \"relationshipType\": \"Type of relationship\",\n                \"description\": \"Description of the relationship\"\n              }\n            ],\n            \"additionalNotes\": \"Any additional character details\"\n          },\n          \"scenario\": {\n            \"title\": \"Scenario title (extract or use 'Untitled Scenario' if not found)\",\n            \"setting\": {\n              \"location\": \"Scenario location (extract or use empty string if not found)\",\n              \"time\": \"Time period (extract or use 'Present day' if not found)\",\n              \"atmosphere\": \"Atmosphere description (extract or use empty string if not found)\"\n            },\n            \"initialSituation\": \"Initial situation (extract or use a summary of the input if not explicit)\",\n            \"otherCharacters\": [\n              {\n                \"name\": \"NPC name\",\n                \"role\": \"NPC role\",\n                \"description\": \"NPC description\",\n                \"relationship\": \"Relationship to main character\"\n              }\n            ],\n            \"narrativeGoals\": \"Narrative goals (extract or use empty string if not found)\",\n            \"toneAndThemes\": \"Tone and themes (extract or use empty string if not found)\",\n            \"roleplayInstructions\": \"Any explicit roleplay instructions (extract or use empty string if not found)\"\n          }\n        }\n        \n        Do your best to extract meaningful information even if the text is not structured. If relationships or other characters aren't explicitly mentioned, create reasonable entries based on the context, or leave arrays empty if there's nothing to work with. Only respond with the JSON object and no other text.`;\n        try {\n          setProcessingStatus('Sending request to Gemini AI...');\n          const response = await geminiService.generateGeneric(prompt);\n          setProcessingStatus('Received AI response, processing data...');\n\n          // Try to parse the JSON response\n          try {\n            // Find the JSON in the response using a regex\n            const jsonRegex = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\}/g;\n            const matches = response.match(jsonRegex);\n            if (matches && matches.length > 0) {\n              // Use the largest match (most complete JSON)\n              const jsonString = matches.reduce((a, b) => a.length > b.length ? a : b);\n              const parsed = JSON.parse(jsonString);\n              setProcessingStatus('Successfully extracted character and scenario data!');\n\n              // Validate the data structure\n              if (parsed.character && parsed.scenario) {\n                // Ensure character name exists or set default\n                if (!parsed.character.name || parsed.character.name.trim() === '') {\n                  parsed.character.name = 'Unnamed Character';\n                }\n\n                // Ensure scenario title exists or set default\n                if (!parsed.scenario.title || parsed.scenario.title.trim() === '') {\n                  parsed.scenario.title = 'Untitled Scenario';\n                }\n\n                // Store the parsed data for try again functionality\n                setParsedData(parsed);\n\n                // Success! Pass the data to parent\n                onSave(parsed.character, parsed.scenario);\n                return;\n              } else {\n                throw new Error('Parsed JSON is missing required character or scenario data');\n              }\n            } else {\n              throw new Error('Failed to extract JSON from AI response');\n            }\n          } catch (jsonError) {\n            console.error('JSON parsing error:', jsonError);\n            setProcessingError(`Failed to extract character and scenario data: ${jsonError.message}`);\n          }\n        } catch (aiError) {\n          console.error('AI processing error:', aiError);\n          setProcessingError(`AI processing failed: ${aiError.message}`);\n        }\n      } else {\n        // Option 2: Manual basic extraction (fallback if no AI service)\n        performBasicExtraction();\n      }\n    } catch (error) {\n      console.error('Setup processing error:', error);\n      setProcessingError(`An error occurred: ${error.message}`);\n    } finally {\n      setIsProcessing(false);\n      setProcessingStatus('');\n    }\n  };\n\n  // Basic extraction logic without AI (very limited)\n  const performBasicExtraction = () => {\n    const lines = setupText.split('\\n');\n    const character = {\n      name: extractValue(lines, 'name:') || 'Unnamed Character',\n      age: extractValue(lines, 'age:') || '25',\n      physicalDescription: extractValue(lines, 'physical description:') || '',\n      background: extractValue(lines, 'background:') || '',\n      personality: extractValue(lines, 'personality:') || '',\n      relationships: [],\n      additionalNotes: ''\n    };\n    const scenario = {\n      title: extractValue(lines, 'title:') || 'Untitled Scenario',\n      setting: {\n        location: extractValue(lines, 'location:') || '',\n        time: extractValue(lines, 'time:') || 'Present day',\n        atmosphere: extractValue(lines, 'atmosphere:') || ''\n      },\n      initialSituation: extractValue(lines, 'initial situation:') || setupText.substring(0, 500),\n      otherCharacters: [],\n      narrativeGoals: extractValue(lines, 'goals:') || '',\n      toneAndThemes: extractValue(lines, 'tone:') || '',\n      roleplayInstructions: ''\n    };\n\n    // Try to extract relationships\n    const relationshipMatch = setupText.match(/relationship[^:]*:([^\\.]+(\\.|$))/i);\n    if (relationshipMatch && relationshipMatch[1]) {\n      character.relationships.push({\n        name: 'Extracted Character',\n        relationshipType: 'Relationship',\n        description: relationshipMatch[1].trim()\n      });\n    }\n\n    // Try to extract other characters\n    const characterMatch = setupText.match(/character[^:]*:([^\\.]+(\\.|$))/i);\n    if (characterMatch && characterMatch[1]) {\n      scenario.otherCharacters.push({\n        name: 'Extracted Character',\n        role: 'Supporting Character',\n        description: characterMatch[1].trim(),\n        relationship: 'Unknown'\n      });\n    }\n\n    // Store the parsed data for try again functionality\n    setParsedData({\n      character,\n      scenario\n    });\n    onSave(character, scenario);\n  };\n\n  // Helper to extract values from text lines\n  const extractValue = (lines, key) => {\n    const regex = new RegExp(key, 'i');\n    const line = lines.find(l => regex.test(l));\n    if (line) {\n      const parts = line.split(/:\\s*/);\n      if (parts.length > 1) {\n        return parts.slice(1).join(':').trim();\n      }\n    }\n    return '';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quick-setup-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Quick Setup Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"setup-description\",\n      children: \"Paste your entire character and scenario setup in the box below. The AI will try to extract all relevant information in one go.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions-top\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"reset-btn\",\n        onClick: onReset,\n        children: \"Start Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"sample-btn\",\n        onClick: loadSampleContent,\n        children: [/*#__PURE__*/_jsxDEV(FileText, {\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), \"Load Sample\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"setup-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"setup-textarea\",\n        value: setupText,\n        onChange: e => setSetupText(e.target.value),\n        rows: 15,\n        placeholder: `Paste or type all your character and scenario details here. Try to include:\n\nCharacter name: \nCharacter age: \nPhysical description: \nBackground: \nPersonality: \nRelationships: \n\nScenario title: \nLocation: \nTime: \nAtmosphere: \nInitial situation: \nOther characters: \nNarrative goals: \nTone and themes: \n\nThe AI will attempt to parse this information, even if it's not perfectly structured.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), processingError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processing-error\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: processingError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), parsedData ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"try-again-btn\",\n          onClick: () => onSave(parsedData.character, parsedData.scenario),\n          type: \"button\",\n          children: \"Continue Anyway\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"try-again-btn\",\n          onClick: processSetupText,\n          disabled: isProcessing,\n          type: \"button\",\n          children: [\"Try Again\", isProcessing && /*#__PURE__*/_jsxDEV(RefreshCw, {\n            size: 16,\n            className: \"spinning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setup-actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"process-btn\",\n          onClick: processSetupText,\n          disabled: isProcessing || !setupText.trim(),\n          children: isProcessing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Loader, {\n              size: 20,\n              className: \"spinning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 17\n            }, this), \"Processing...\"]\n          }, void 0, true) : 'Process and Start Roleplay'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), isProcessing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ai-loading-indicator setup-processor\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-thinking-animation\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ai-dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ai-dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ai-dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ai-status-message\",\n          children: processingStatus || 'Processing your scenario...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quick-setup-help\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Tips for best results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Include clear labels like \\\"Character name:\\\" or \\\"Location:\\\" to help the AI identify information.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Provide as much detail as you can about both the character and scenario.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"If you have specific roleplay instructions, label them clearly as \\\"Roleplay instructions:\\\"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"The AI will make its best guess at extracting information, but you can always edit details in the chat.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this);\n};\n_s(QuickSetup, \"vF6yDZ7NMjWNwYbpI724ntwFbe8=\");\n_c = QuickSetup;\nexport default QuickSetup;\nvar _c;\n$RefreshReg$(_c, \"QuickSetup\");","map":{"version":3,"names":["React","useState","RefreshCw","FileText","Loader","jsxDEV","_jsxDEV","Fragment","_Fragment","QuickSetup","onSave","geminiService","onReset","_s","setupText","setSetupText","sampleContent","loadSampleContent","isProcessing","setIsProcessing","processingStatus","setProcessingStatus","processingError","setProcessingError","parsedData","setParsedData","processSetupText","trim","prompt","response","generateGeneric","jsonRegex","matches","match","length","jsonString","reduce","a","b","parsed","JSON","parse","character","scenario","name","title","Error","jsonError","console","error","message","aiError","performBasicExtraction","lines","split","extractValue","age","physicalDescription","background","personality","relationships","additionalNotes","setting","location","time","atmosphere","initialSituation","substring","otherCharacters","narrativeGoals","toneAndThemes","roleplayInstructions","relationshipMatch","push","relationshipType","description","characterMatch","role","relationship","key","regex","RegExp","line","find","l","test","parts","slice","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onClick","size","value","onChange","e","target","rows","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/ryanmorrison/Code/narrativeforge/src/components/SetupMode/QuickSetup.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { RefreshCw, FileText, Loader } from 'lucide-react';\n\n/**\n * QuickSetup - A streamlined setup component allowing users to input\n * all character and scenario details in a single text area\n */\nconst QuickSetup = ({ onSave, geminiService, onReset }) => {\n  const [setupText, setSetupText] = useState('');\n  \n  // Sample content for quick setup\n  const sampleContent = `Character name: Alex Morgan\nCharacter age: 29\nPhysical description: Tall with dark brown hair often tied in a ponytail. Athletic build from years of running. Has a small scar above their right eyebrow from a childhood accident. Usually dresses in comfortable, practical clothing - jeans, fitted t-shirts, and a well-worn leather jacket.\n\nBackground: Grew up in a small coastal town before moving to the city for university. Studied journalism but dropped out in final year after uncovering corruption in the university administration. Now works as a freelance investigative journalist, specializing in environmental issues. Lives in a small apartment filled with books, plants, and collected souvenirs from travels.\n\nPersonality: Determined and persistent, sometimes to the point of obsession. Deeply loyal to friends but struggles to maintain romantic relationships due to workaholic tendencies. Values truth and justice above personal comfort. Has a dry sense of humor that emerges when comfortable. Tends to be suspicious of authority figures.\n\nRelationships: Has a complicated relationship with former mentor, James Chen, who now works for a major news corporation that Alex believes has compromised its integrity for corporate interests.\n\nScenario title: The Blackwater Files\n\nLocation: Blackwater Bay, a once-thriving fishing town now struggling after the opening of Meridian Chemical's processing plant on the outskirts\n\nTime: Present day, autumn, when the tourist season has ended and the town is quieter\n\nAtmosphere: Tense, mysterious, with an underlying sense of decay and secrecy\n\nInitial situation: You've returned to Blackwater Bay, your hometown, after receiving an anonymous tip about unusual illness patterns among residents. The local doctor who first noticed the trend, Dr. Eliza Hayes, was recently found dead in what officials ruled a suicide. Your source suggests otherwise and claims it's connected to the chemical plant. Upon arrival, you notice strange security measures at the plant and unusual resistance from town officials when you start asking questions.\n\nNarrative goals: Uncover the truth about Dr. Hayes' death and the potential environmental hazard, while navigating old relationships and new dangers in your hometown.\n\nTone and themes: Environmental justice, small-town secrets, corporate corruption, personal redemption, the cost of truth`;\n  \n  // Function to load sample content\n  const loadSampleContent = () => {\n    setSetupText(sampleContent);\n  };\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingStatus, setProcessingStatus] = useState('');\n  const [processingError, setProcessingError] = useState(null);\n  const [parsedData, setParsedData] = useState(null);\n\n  // Process the text and try to extract character and scenario information\n  const processSetupText = async () => {\n    try {\n      setIsProcessing(true);\n      setProcessingStatus('Preparing to process your character and scenario...');\n      setProcessingError(null);\n      setParsedData(null);\n\n      if (!setupText.trim()) {\n        setProcessingError('Please enter some text before processing');\n        setIsProcessing(false);\n        return;\n      }\n\n      // Option 1: Use Gemini to parse the input if service is available\n      if (geminiService) {\n        setProcessingStatus('Creating AI prompt to extract character and scenario details...');\n        const prompt = `Extract character and scenario details from the following roleplay setup text. \n        \n        TEXT:\n        ${setupText}\n        \n        INSTRUCTIONS:\n        Return a valid JSON object containing two nested objects: 'character' and 'scenario'. Follow this exact structure:\n        \n        {\n          \"character\": {\n            \"name\": \"Character's name (extract or use 'Unnamed Character' if not found)\",\n            \"age\": \"Character's age (extract or use '25' if not found)\",\n            \"physicalDescription\": \"Character's physical description (extract or use empty string if not found)\",\n            \"background\": \"Character's background (extract or use empty string if not found)\",\n            \"personality\": \"Character's personality (extract or use empty string if not found)\",\n            \"relationships\": [\n              {\n                \"name\": \"Related character's name\",\n                \"relationshipType\": \"Type of relationship\",\n                \"description\": \"Description of the relationship\"\n              }\n            ],\n            \"additionalNotes\": \"Any additional character details\"\n          },\n          \"scenario\": {\n            \"title\": \"Scenario title (extract or use 'Untitled Scenario' if not found)\",\n            \"setting\": {\n              \"location\": \"Scenario location (extract or use empty string if not found)\",\n              \"time\": \"Time period (extract or use 'Present day' if not found)\",\n              \"atmosphere\": \"Atmosphere description (extract or use empty string if not found)\"\n            },\n            \"initialSituation\": \"Initial situation (extract or use a summary of the input if not explicit)\",\n            \"otherCharacters\": [\n              {\n                \"name\": \"NPC name\",\n                \"role\": \"NPC role\",\n                \"description\": \"NPC description\",\n                \"relationship\": \"Relationship to main character\"\n              }\n            ],\n            \"narrativeGoals\": \"Narrative goals (extract or use empty string if not found)\",\n            \"toneAndThemes\": \"Tone and themes (extract or use empty string if not found)\",\n            \"roleplayInstructions\": \"Any explicit roleplay instructions (extract or use empty string if not found)\"\n          }\n        }\n        \n        Do your best to extract meaningful information even if the text is not structured. If relationships or other characters aren't explicitly mentioned, create reasonable entries based on the context, or leave arrays empty if there's nothing to work with. Only respond with the JSON object and no other text.`;\n\n        try {\n          setProcessingStatus('Sending request to Gemini AI...');\n          const response = await geminiService.generateGeneric(prompt);\n          setProcessingStatus('Received AI response, processing data...');\n          \n          // Try to parse the JSON response\n          try {\n            // Find the JSON in the response using a regex\n            const jsonRegex = /\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\}/g;\n            const matches = response.match(jsonRegex);\n            \n            if (matches && matches.length > 0) {\n              // Use the largest match (most complete JSON)\n              const jsonString = matches.reduce((a, b) => a.length > b.length ? a : b);\n              const parsed = JSON.parse(jsonString);\n              \n              setProcessingStatus('Successfully extracted character and scenario data!');\n              \n              // Validate the data structure\n              if (parsed.character && parsed.scenario) {\n                // Ensure character name exists or set default\n                if (!parsed.character.name || parsed.character.name.trim() === '') {\n                  parsed.character.name = 'Unnamed Character';\n                }\n                \n                // Ensure scenario title exists or set default\n                if (!parsed.scenario.title || parsed.scenario.title.trim() === '') {\n                  parsed.scenario.title = 'Untitled Scenario';\n                }\n                \n                // Store the parsed data for try again functionality\n                setParsedData(parsed);\n                \n                // Success! Pass the data to parent\n                onSave(parsed.character, parsed.scenario);\n                return;\n              } else {\n                throw new Error('Parsed JSON is missing required character or scenario data');\n              }\n            } else {\n              throw new Error('Failed to extract JSON from AI response');\n            }\n          } catch (jsonError) {\n            console.error('JSON parsing error:', jsonError);\n            setProcessingError(`Failed to extract character and scenario data: ${jsonError.message}`);\n          }\n        } catch (aiError) {\n          console.error('AI processing error:', aiError);\n          setProcessingError(`AI processing failed: ${aiError.message}`);\n        }\n      } else {\n        // Option 2: Manual basic extraction (fallback if no AI service)\n        performBasicExtraction();\n      }\n    } catch (error) {\n      console.error('Setup processing error:', error);\n      setProcessingError(`An error occurred: ${error.message}`);\n    } finally {\n      setIsProcessing(false);\n      setProcessingStatus('');\n    }\n  };\n\n  // Basic extraction logic without AI (very limited)\n  const performBasicExtraction = () => {\n    const lines = setupText.split('\\n');\n    const character = {\n      name: extractValue(lines, 'name:') || 'Unnamed Character',\n      age: extractValue(lines, 'age:') || '25',\n      physicalDescription: extractValue(lines, 'physical description:') || '',\n      background: extractValue(lines, 'background:') || '',\n      personality: extractValue(lines, 'personality:') || '',\n      relationships: [],\n      additionalNotes: ''\n    };\n\n    const scenario = {\n      title: extractValue(lines, 'title:') || 'Untitled Scenario',\n      setting: {\n        location: extractValue(lines, 'location:') || '',\n        time: extractValue(lines, 'time:') || 'Present day',\n        atmosphere: extractValue(lines, 'atmosphere:') || ''\n      },\n      initialSituation: extractValue(lines, 'initial situation:') || setupText.substring(0, 500),\n      otherCharacters: [],\n      narrativeGoals: extractValue(lines, 'goals:') || '',\n      toneAndThemes: extractValue(lines, 'tone:') || '',\n      roleplayInstructions: ''\n    };\n\n    // Try to extract relationships\n    const relationshipMatch = setupText.match(/relationship[^:]*:([^\\.]+(\\.|$))/i);\n    if (relationshipMatch && relationshipMatch[1]) {\n      character.relationships.push({\n        name: 'Extracted Character',\n        relationshipType: 'Relationship',\n        description: relationshipMatch[1].trim()\n      });\n    }\n\n    // Try to extract other characters\n    const characterMatch = setupText.match(/character[^:]*:([^\\.]+(\\.|$))/i);\n    if (characterMatch && characterMatch[1]) {\n      scenario.otherCharacters.push({\n        name: 'Extracted Character',\n        role: 'Supporting Character',\n        description: characterMatch[1].trim(),\n        relationship: 'Unknown'\n      });\n    }\n    \n    // Store the parsed data for try again functionality\n    setParsedData({ character, scenario });\n\n    onSave(character, scenario);\n  };\n\n  // Helper to extract values from text lines\n  const extractValue = (lines, key) => {\n    const regex = new RegExp(key, 'i');\n    const line = lines.find(l => regex.test(l));\n    if (line) {\n      const parts = line.split(/:\\s*/);\n      if (parts.length > 1) {\n        return parts.slice(1).join(':').trim();\n      }\n    }\n    return '';\n  };\n\n  return (\n    <div className=\"quick-setup-container\">\n      <h2>Quick Setup Mode</h2>\n      <p className=\"setup-description\">\n        Paste your entire character and scenario setup in the box below. \n        The AI will try to extract all relevant information in one go.\n      </p>\n\n      <div className=\"form-actions-top\">\n        <button type=\"button\" className=\"reset-btn\" onClick={onReset}>\n          Start Over\n        </button>\n        <button type=\"button\" className=\"sample-btn\" onClick={loadSampleContent}>\n          <FileText size={16} />\n          Load Sample\n        </button>\n      </div>\n\n      <div className=\"setup-form\">\n        <textarea\n          className=\"setup-textarea\"\n          value={setupText}\n          onChange={(e) => setSetupText(e.target.value)}\n          rows={15}\n          placeholder={`Paste or type all your character and scenario details here. Try to include:\n\nCharacter name: \nCharacter age: \nPhysical description: \nBackground: \nPersonality: \nRelationships: \n\nScenario title: \nLocation: \nTime: \nAtmosphere: \nInitial situation: \nOther characters: \nNarrative goals: \nTone and themes: \n\nThe AI will attempt to parse this information, even if it's not perfectly structured.`}\n        />\n\n        {processingError && (\n          <div className=\"processing-error\">\n            <p>{processingError}</p>\n            {parsedData ? (\n              <button \n                className=\"try-again-btn\" \n                onClick={() => onSave(parsedData.character, parsedData.scenario)}\n                type=\"button\"\n              >\n                Continue Anyway\n              </button>\n            ) : (\n              <button \n                className=\"try-again-btn\" \n                onClick={processSetupText}\n                disabled={isProcessing}\n                type=\"button\"\n              >\n                Try Again\n                {isProcessing && <RefreshCw size={16} className=\"spinning\" />}\n              </button>\n            )}\n          </div>\n        )}\n\n        <div className=\"setup-actions\">\n          <button \n            type=\"button\" \n            className=\"process-btn\" \n            onClick={processSetupText}\n            disabled={isProcessing || !setupText.trim()}\n          >\n            {isProcessing ? (\n              <>\n                <Loader size={20} className=\"spinning\" />\n                Processing...\n              </>\n            ) : (\n              'Process and Start Roleplay'\n            )}\n          </button>\n        </div>\n        \n        {isProcessing && (\n          <div className=\"ai-loading-indicator setup-processor\">\n            <div className=\"ai-thinking-animation\">\n              <div className=\"ai-dot\"></div>\n              <div className=\"ai-dot\"></div>\n              <div className=\"ai-dot\"></div>\n            </div>\n            <div className=\"ai-status-message\">{processingStatus || 'Processing your scenario...'}</div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"quick-setup-help\">\n        <h3>Tips for best results:</h3>\n        <ul>\n          <li>Include clear labels like \"Character name:\" or \"Location:\" to help the AI identify information.</li>\n          <li>Provide as much detail as you can about both the character and scenario.</li>\n          <li>If you have specific roleplay instructions, label them clearly as \"Roleplay instructions:\"</li>\n          <li>The AI will make its best guess at extracting information, but you can always edit details in the chat.</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default QuickSetup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}