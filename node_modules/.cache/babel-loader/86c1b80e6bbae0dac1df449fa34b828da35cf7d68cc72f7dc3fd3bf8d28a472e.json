{"ast":null,"code":"/**\n * Utility functions for text formatting in the NarrativeForge app\n */\n\n/**\n * Ensures text has proper paragraph breaks\n * This function helps with the API responses that might lack proper spacing\n * \n * @param {string} text - The text to format\n * @returns {string} - Formatted text with proper paragraph breaks\n */\nexport const ensureParagraphBreaks = text => {\n  if (!text || typeof text !== 'string') return '';\n\n  // Normalize line endings\n  let formattedText = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n\n  // Convert single periods at the end of sentences followed by a space to period + double newline\n  formattedText = formattedText.replace(/\\.(?=\\s+[A-Z])/g, '.\\n\\n');\n\n  // Ensure two newlines between paragraphs\n  formattedText = formattedText.replace(/\\n{3,}/g, '\\n\\n');\n\n  // Convert blocks of text without breaks that are long into paragraphs\n  const paragraphs = formattedText.split(/\\n\\s*\\n/);\n  const improvedParagraphs = paragraphs.map(paragraph => {\n    // If paragraph is very long and has no internal breaks, split by sentences\n    if (paragraph.length > 300 && !paragraph.includes('\\n')) {\n      const sentences = paragraph.split(/(?<=\\. )/);\n\n      // Group sentences into more digestible paragraphs\n      let newParagraph = '';\n      let currentGroup = '';\n      sentences.forEach(sentence => {\n        if (currentGroup.length + sentence.length > 200) {\n          newParagraph += currentGroup + '\\n\\n';\n          currentGroup = sentence;\n        } else {\n          currentGroup += sentence;\n        }\n      });\n      if (currentGroup) {\n        newParagraph += currentGroup;\n      }\n      return newParagraph;\n    }\n    return paragraph;\n  });\n  return improvedParagraphs.join('\\n\\n');\n};\n\n/**\n * Preprocesses messages from AI to improve formatting\n * \n * @param {string} message - The message from AI to preprocess\n * @returns {string} - Formatted message with better spacing and line breaks\n */\nexport const preprocessAIMessage = message => {\n  if (!message || typeof message !== 'string') return '';\n\n  // Apply paragraph breaks\n  let processedMessage = ensureParagraphBreaks(message);\n\n  // Remove markdown bold formatting\n  processedMessage = processedMessage.replace(/\\*\\*([^*]+)\\*\\*/g, '$1');\n\n  // Add spacing after social media handles and hashtags\n  processedMessage = processedMessage.replace(/@([a-zA-Z0-9_]+)/g, '@$1 ');\n  processedMessage = processedMessage.replace(/#([a-zA-Z0-9_]+)/g, '#$1 ');\n  return processedMessage;\n};\n\n/**\n * Apply special formatting for social media content\n * \n * @param {string} content - Social media content to format\n * @returns {string} - Formatted social media content with proper platform separation\n */\nexport const formatSocialMediaContent = content => {\n  if (!content || typeof content !== 'string') return '';\n\n  // Remove markdown bold formatting\n  let formattedContent = content.replace(/\\*\\*([^*]+)\\*\\*/g, '$1');\n\n  // Add explicit paragraph breaks before each platform mention\n  formattedContent = formattedContent.replace(/([^\\n])(📱\\s*Instagram|🎵\\s*TikTok|▶️\\s*YouTube|🐦\\s*Twitter|👻\\s*Snapchat)/g, '$1\\n\\n$2');\n\n  // Find and format platform mentions with emojis\n  formattedContent = formattedContent.replace(/Instagram/g, '📱 Instagram').replace(/TikTok/g, '🎵 TikTok').replace(/YouTube/g, '▶️ YouTube').replace(/Twitter/g, '🐦 Twitter').replace(/Snapchat/g, '👻 Snapchat').replace(/trending/gi, '<span class=\"highlight\">trending</span>').replace(/(\\d+)k?\\s*followers/gi, '$1k followers 👥').replace(/(\\d+)k?\\s*likes/gi, '$1k likes ❤️').replace(/(\\d+)k?\\s*views/gi, '$1k views 👁️').replace(/(\\d+)k?\\s*shares/gi, '$1k shares 🔄').replace(/(\\d+)k?\\s*comments/gi, '$1k comments 💬');\n\n  // Split content into paragraphs\n  let paragraphs = formattedContent.split(/\\n\\n+/);\n\n  // Mark each paragraph that starts with a platform indicator\n  let processedParagraphs = paragraphs.map(para => {\n    // Check if paragraph starts with a platform indicator\n    if (para.match(/^(📱\\s*Instagram|🎵\\s*TikTok|▶️\\s*YouTube|🐦\\s*Twitter|👻\\s*Snapchat)/)) {\n      // Extract platform name\n      const platformMatch = para.match(/^(📱\\s*Instagram|🎵\\s*TikTok|▶️\\s*YouTube|🐦\\s*Twitter|👻\\s*Snapchat)/);\n      let platformName = '';\n      if (platformMatch) {\n        if (platformMatch[0].includes('Instagram')) platformName = 'Instagram';else if (platformMatch[0].includes('TikTok')) platformName = 'TikTok';else if (platformMatch[0].includes('YouTube')) platformName = 'YouTube';else if (platformMatch[0].includes('Twitter')) platformName = 'Twitter';else if (platformMatch[0].includes('Snapchat')) platformName = 'Snapchat';\n      }\n\n      // Add platform marker\n      return `[PLATFORM:${platformName}] ${para}`;\n    }\n    return para;\n  });\n\n  // Add extra line breaks between platform sections for better visual separation\n  return processedParagraphs.join('\\n\\n\\n');\n};","map":{"version":3,"names":["ensureParagraphBreaks","text","formattedText","replace","paragraphs","split","improvedParagraphs","map","paragraph","length","includes","sentences","newParagraph","currentGroup","forEach","sentence","join","preprocessAIMessage","message","processedMessage","formatSocialMediaContent","content","formattedContent","processedParagraphs","para","match","platformMatch","platformName"],"sources":["/Users/ryanmorrison/Code/narrativeforge/src/utils/textFormatUtils.js"],"sourcesContent":["/**\n * Utility functions for text formatting in the NarrativeForge app\n */\n\n/**\n * Ensures text has proper paragraph breaks\n * This function helps with the API responses that might lack proper spacing\n * \n * @param {string} text - The text to format\n * @returns {string} - Formatted text with proper paragraph breaks\n */\nexport const ensureParagraphBreaks = (text) => {\n  if (!text || typeof text !== 'string') return '';\n  \n  // Normalize line endings\n  let formattedText = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n  \n  // Convert single periods at the end of sentences followed by a space to period + double newline\n  formattedText = formattedText.replace(/\\.(?=\\s+[A-Z])/g, '.\\n\\n');\n  \n  // Ensure two newlines between paragraphs\n  formattedText = formattedText.replace(/\\n{3,}/g, '\\n\\n');\n  \n  // Convert blocks of text without breaks that are long into paragraphs\n  const paragraphs = formattedText.split(/\\n\\s*\\n/);\n  \n  const improvedParagraphs = paragraphs.map(paragraph => {\n    // If paragraph is very long and has no internal breaks, split by sentences\n    if (paragraph.length > 300 && !paragraph.includes('\\n')) {\n      const sentences = paragraph.split(/(?<=\\. )/);\n      \n      // Group sentences into more digestible paragraphs\n      let newParagraph = '';\n      let currentGroup = '';\n      \n      sentences.forEach(sentence => {\n        if (currentGroup.length + sentence.length > 200) {\n          newParagraph += currentGroup + '\\n\\n';\n          currentGroup = sentence;\n        } else {\n          currentGroup += sentence;\n        }\n      });\n      \n      if (currentGroup) {\n        newParagraph += currentGroup;\n      }\n      \n      return newParagraph;\n    }\n    \n    return paragraph;\n  });\n  \n  return improvedParagraphs.join('\\n\\n');\n};\n\n/**\n * Preprocesses messages from AI to improve formatting\n * \n * @param {string} message - The message from AI to preprocess\n * @returns {string} - Formatted message with better spacing and line breaks\n */\nexport const preprocessAIMessage = (message) => {\n  if (!message || typeof message !== 'string') return '';\n  \n  // Apply paragraph breaks\n  let processedMessage = ensureParagraphBreaks(message);\n  \n  // Remove markdown bold formatting\n  processedMessage = processedMessage.replace(/\\*\\*([^*]+)\\*\\*/g, '$1');\n  \n  // Add spacing after social media handles and hashtags\n  processedMessage = processedMessage.replace(/@([a-zA-Z0-9_]+)/g, '@$1 ');\n  processedMessage = processedMessage.replace(/#([a-zA-Z0-9_]+)/g, '#$1 ');\n  \n  return processedMessage;\n};\n\n/**\n * Apply special formatting for social media content\n * \n * @param {string} content - Social media content to format\n * @returns {string} - Formatted social media content with proper platform separation\n */\nexport const formatSocialMediaContent = (content) => {\n  if (!content || typeof content !== 'string') return '';\n  \n  // Remove markdown bold formatting\n  let formattedContent = content.replace(/\\*\\*([^*]+)\\*\\*/g, '$1');\n  \n  // Add explicit paragraph breaks before each platform mention\n  formattedContent = formattedContent\n    .replace(/([^\\n])(📱\\s*Instagram|🎵\\s*TikTok|▶️\\s*YouTube|🐦\\s*Twitter|👻\\s*Snapchat)/g, '$1\\n\\n$2');\n\n  // Find and format platform mentions with emojis\n  formattedContent = formattedContent\n    .replace(/Instagram/g, '📱 Instagram')\n    .replace(/TikTok/g, '🎵 TikTok')\n    .replace(/YouTube/g, '▶️ YouTube')\n    .replace(/Twitter/g, '🐦 Twitter')\n    .replace(/Snapchat/g, '👻 Snapchat')\n    .replace(/trending/gi, '<span class=\"highlight\">trending</span>')\n    .replace(/(\\d+)k?\\s*followers/gi, '$1k followers 👥')\n    .replace(/(\\d+)k?\\s*likes/gi, '$1k likes ❤️')\n    .replace(/(\\d+)k?\\s*views/gi, '$1k views 👁️')\n    .replace(/(\\d+)k?\\s*shares/gi, '$1k shares 🔄')\n    .replace(/(\\d+)k?\\s*comments/gi, '$1k comments 💬');\n\n  // Split content into paragraphs\n  let paragraphs = formattedContent.split(/\\n\\n+/);\n  \n  // Mark each paragraph that starts with a platform indicator\n  let processedParagraphs = paragraphs.map(para => {\n    // Check if paragraph starts with a platform indicator\n    if (para.match(/^(📱\\s*Instagram|🎵\\s*TikTok|▶️\\s*YouTube|🐦\\s*Twitter|👻\\s*Snapchat)/)) {\n      // Extract platform name\n      const platformMatch = para.match(/^(📱\\s*Instagram|🎵\\s*TikTok|▶️\\s*YouTube|🐦\\s*Twitter|👻\\s*Snapchat)/);\n      let platformName = '';\n      \n      if (platformMatch) {\n        if (platformMatch[0].includes('Instagram')) platformName = 'Instagram';\n        else if (platformMatch[0].includes('TikTok')) platformName = 'TikTok';\n        else if (platformMatch[0].includes('YouTube')) platformName = 'YouTube';\n        else if (platformMatch[0].includes('Twitter')) platformName = 'Twitter';\n        else if (platformMatch[0].includes('Snapchat')) platformName = 'Snapchat';\n      }\n      \n      // Add platform marker\n      return `[PLATFORM:${platformName}] ${para}`;\n    }\n    return para;\n  });\n  \n  // Add extra line breaks between platform sections for better visual separation\n  return processedParagraphs.join('\\n\\n\\n');\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}