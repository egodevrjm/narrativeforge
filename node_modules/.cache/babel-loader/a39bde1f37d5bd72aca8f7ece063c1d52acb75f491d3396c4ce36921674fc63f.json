{"ast":null,"code":"var _jsxFileName = \"/Users/ryanmorrison/Code/narrativeforge/src/components/SocialMediaMessage.js\";\nimport React from 'react';\n\n/**\n * Component for rendering social media messages in a line-by-line format\n * \n * @param {Object} props - Component props\n * @param {string} props.content - The social media content to render\n * @returns {JSX.Element} - Rendered social media message\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocialMediaMessage = ({\n  content\n}) => {\n  if (!content || typeof content !== 'string') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"social-media-content\",\n      children: \"Invalid content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Normalize line breaks\n  const normalizedContent = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n  const lines = normalizedContent.split('\\n');\n\n  // Format individual lines with special styling\n  const formattedLines = lines.map((line, index) => {\n    // Remove markdown bold formatting first\n    let processedLine = line.replace(/\\*\\*([^*]+)\\*\\*/g, '$1');\n\n    // Apply basic formatting\n    const formattedLine = processedLine.replace(/Instagram/g, 'üì± Instagram').replace(/TikTok/g, 'üéµ TikTok').replace(/YouTube/g, '‚ñ∂Ô∏è YouTube').replace(/Twitter/g, 'üê¶ Twitter').replace(/Snapchat/g, 'üëª Snapchat').replace(/@([a-zA-Z0-9_]+)/g, '<span class=\"handle\">@$1</span>').replace(/\"([^\"]+)\"/g, '<span class=\"quote\">\"$1\"</span>').replace(/\\bviral\\b/gi, '<span class=\"highlight\">viral</span>').replace(/(\\d+)k?\\s*followers/gi, '$1k followers üë•').replace(/(\\d+)k?\\s*likes/gi, '$1k likes ‚ù§Ô∏è').replace(/(\\d+)k?\\s*views/gi, '$1k views üëÅÔ∏è').replace(/(\\d+)k?\\s*shares/gi, '$1k shares üîÑ').replace(/(\\d+)k?\\s*comments/gi, '$1k comments üí¨');\n\n    // Check if line is a platform header (includes a platform name)\n    const isPlatformHeader = processedLine.match(/^\\s*([\\w]+):/);\n    if (isPlatformHeader) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"platform-header\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          dangerouslySetInnerHTML: {\n            __html: formattedLine\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Regular message line\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"social-media-message\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: formattedLine\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"social-media-content\",\n    children: formattedLines\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_c = SocialMediaMessage;\nexport default SocialMediaMessage;\nvar _c;\n$RefreshReg$(_c, \"SocialMediaMessage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SocialMediaMessage","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","normalizedContent","replace","lines","split","formattedLines","map","line","index","processedLine","formattedLine","isPlatformHeader","match","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["/Users/ryanmorrison/Code/narrativeforge/src/components/SocialMediaMessage.js"],"sourcesContent":["import React from 'react';\n\n/**\n * Component for rendering social media messages in a line-by-line format\n * \n * @param {Object} props - Component props\n * @param {string} props.content - The social media content to render\n * @returns {JSX.Element} - Rendered social media message\n */\nconst SocialMediaMessage = ({ content }) => {\n  if (!content || typeof content !== 'string') {\n    return <div className=\"social-media-content\">Invalid content</div>;\n  }\n  \n  // Normalize line breaks\n  const normalizedContent = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n  const lines = normalizedContent.split('\\n');\n  \n  // Format individual lines with special styling\n  const formattedLines = lines.map((line, index) => {\n    // Remove markdown bold formatting first\n    let processedLine = line.replace(/\\*\\*([^*]+)\\*\\*/g, '$1');\n    \n    // Apply basic formatting\n    const formattedLine = processedLine\n      .replace(/Instagram/g, 'üì± Instagram')\n      .replace(/TikTok/g, 'üéµ TikTok')\n      .replace(/YouTube/g, '‚ñ∂Ô∏è YouTube')\n      .replace(/Twitter/g, 'üê¶ Twitter')\n      .replace(/Snapchat/g, 'üëª Snapchat')\n      .replace(/@([a-zA-Z0-9_]+)/g, '<span class=\"handle\">@$1</span>')\n      .replace(/\"([^\"]+)\"/g, '<span class=\"quote\">\"$1\"</span>')\n      .replace(/\\bviral\\b/gi, '<span class=\"highlight\">viral</span>')\n      .replace(/(\\d+)k?\\s*followers/gi, '$1k followers üë•')\n      .replace(/(\\d+)k?\\s*likes/gi, '$1k likes ‚ù§Ô∏è')\n      .replace(/(\\d+)k?\\s*views/gi, '$1k views üëÅÔ∏è')\n      .replace(/(\\d+)k?\\s*shares/gi, '$1k shares üîÑ')\n      .replace(/(\\d+)k?\\s*comments/gi, '$1k comments üí¨');\n    \n    // Check if line is a platform header (includes a platform name)\n    const isPlatformHeader = processedLine.match(/^\\s*([\\w]+):/);\n    \n    if (isPlatformHeader) {\n      return (\n        <div key={index} className=\"platform-header\">\n          <span dangerouslySetInnerHTML={{ __html: formattedLine }} />\n        </div>\n      );\n    }\n    \n    // Regular message line\n    return (\n      <div key={index} className=\"social-media-message\">\n        <span dangerouslySetInnerHTML={{ __html: formattedLine }} />\n      </div>\n    );\n  });\n  \n  return (\n    <div className=\"social-media-content\">\n      {formattedLines}\n    </div>\n  );\n};\n\nexport default SocialMediaMessage;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AANA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAC1C,IAAI,CAACA,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC3C,oBAAOF,OAAA;MAAKG,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACpE;;EAEA;EACA,MAAMC,iBAAiB,GAAGP,OAAO,CAACQ,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;EAC7E,MAAMC,KAAK,GAAGF,iBAAiB,CAACG,KAAK,CAAC,IAAI,CAAC;;EAE3C;EACA,MAAMC,cAAc,GAAGF,KAAK,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;IAChD;IACA,IAAIC,aAAa,GAAGF,IAAI,CAACL,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAC;;IAE1D;IACA,MAAMQ,aAAa,GAAGD,aAAa,CAChCP,OAAO,CAAC,YAAY,EAAE,cAAc,CAAC,CACrCA,OAAO,CAAC,SAAS,EAAE,WAAW,CAAC,CAC/BA,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,CACjCA,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,CACjCA,OAAO,CAAC,WAAW,EAAE,aAAa,CAAC,CACnCA,OAAO,CAAC,mBAAmB,EAAE,iCAAiC,CAAC,CAC/DA,OAAO,CAAC,YAAY,EAAE,iCAAiC,CAAC,CACxDA,OAAO,CAAC,aAAa,EAAE,sCAAsC,CAAC,CAC9DA,OAAO,CAAC,uBAAuB,EAAE,kBAAkB,CAAC,CACpDA,OAAO,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAC5CA,OAAO,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAC7CA,OAAO,CAAC,oBAAoB,EAAE,eAAe,CAAC,CAC9CA,OAAO,CAAC,sBAAsB,EAAE,iBAAiB,CAAC;;IAErD;IACA,MAAMS,gBAAgB,GAAGF,aAAa,CAACG,KAAK,CAAC,cAAc,CAAC;IAE5D,IAAID,gBAAgB,EAAE;MACpB,oBACEnB,OAAA;QAAiBG,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC1CJ,OAAA;UAAMqB,uBAAuB,EAAE;YAAEC,MAAM,EAAEJ;UAAc;QAAE;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GADpDQ,KAAK;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CAAC;IAEV;;IAEA;IACA,oBACER,OAAA;MAAiBG,SAAS,EAAC,sBAAsB;MAAAC,QAAA,eAC/CJ,OAAA;QAAMqB,uBAAuB,EAAE;UAAEC,MAAM,EAAEJ;QAAc;MAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,GADpDQ,KAAK;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CAAC;EAEV,CAAC,CAAC;EAEF,oBACER,OAAA;IAAKG,SAAS,EAAC,sBAAsB;IAAAC,QAAA,EAClCS;EAAc;IAAAR,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV,CAAC;AAACe,EAAA,GAtDItB,kBAAkB;AAwDxB,eAAeA,kBAAkB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}