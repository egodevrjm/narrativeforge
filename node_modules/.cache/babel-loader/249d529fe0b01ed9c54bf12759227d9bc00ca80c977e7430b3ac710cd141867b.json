{"ast":null,"code":"var _jsxFileName = \"/Users/ryanmorrison/Code/narrativeforge/src/components/SocialMediaMessage.js\";\nimport React from 'react';\n\n/**\n * Component for rendering social media messages in a line-by-line format\n * \n * @param {Object} props - Component props\n * @param {string} props.content - The social media content to render\n * @returns {JSX.Element} - Rendered social media message\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocialMediaMessage = ({\n  content\n}) => {\n  if (!content || typeof content !== 'string') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"social-media-content\",\n      children: \"Invalid content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Helper function to identify platform headers\n  const isPlatformHeader = text => {\n    return text.includes('📱 Instagram') || text.includes('🎵 TikTok') || text.includes('▶️ YouTube') || text.includes('🐦 Twitter') || text.includes('👻 Snapchat');\n  };\n\n  // Normalize line breaks and add extra breaks around platform headers\n  let normalizedContent = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n\n  // Add extra line breaks around platform indicators\n  const platformIndicators = ['📱 Instagram', '🎵 TikTok', '▶️ YouTube', '🐦 Twitter', '👻 Snapchat'];\n  platformIndicators.forEach(indicator => {\n    // Don't add a leading break if this indicator starts the content\n    if (normalizedContent.trim().startsWith(indicator)) {\n      normalizedContent = normalizedContent;\n    } else {\n      normalizedContent = normalizedContent.replace(new RegExp(indicator, 'g'), '\\n\\n' + indicator);\n    }\n  });\n\n  // Split content into lines\n  const lines = normalizedContent.split('\\n');\n\n  // Format individual lines with special styling\n  const formattedLines = lines.map((line, index) => {\n    // Remove markdown bold formatting first\n    let processedLine = line.replace(/\\*\\*([^*]+)\\*\\*/g, '$1');\n\n    // Apply basic formatting\n    const formattedLine = processedLine.replace(/Instagram/g, '📱 Instagram').replace(/TikTok/g, '🎵 TikTok').replace(/YouTube/g, '▶️ YouTube').replace(/Twitter/g, '🐦 Twitter').replace(/Snapchat/g, '👻 Snapchat').replace(/@([a-zA-Z0-9_]+)/g, '<span class=\"handle\">@$1</span>').replace(/\"([^\"]+)\"/g, '<span class=\"quote\">\"$1\"</span>').replace(/\\bviral\\b/gi, '<span class=\"highlight\">viral</span>').replace(/(\\d+)k?\\s*followers/gi, '$1k followers 👥').replace(/(\\d+)k?\\s*likes/gi, '$1k likes ❤️').replace(/(\\d+)k?\\s*views/gi, '$1k views 👁️').replace(/(\\d+)k?\\s*shares/gi, '$1k shares 🔄').replace(/(\\d+)k?\\s*comments/gi, '$1k comments 💬');\n\n    // Check if line is a platform header (includes a platform name)\n    if (isPlatformHeader(formattedLine)) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"platform-header\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          dangerouslySetInnerHTML: {\n            __html: formattedLine\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Create an empty spacer div if line is empty\n    if (formattedLine.trim() === '') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-spacer\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 14\n      }, this);\n    }\n\n    // Regular message line\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"social-media-message\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: formattedLine\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  });\n\n  // Group messages by platform to create better visual separation\n  const groupedContent = [];\n  let currentPlatform = null;\n  let currentGroup = [];\n  formattedLines.forEach((line, index) => {\n    var _line$props, _line$props$dangerous;\n    // Check if this line is a new platform header\n    const platformMatch = typeof ((_line$props = line.props) === null || _line$props === void 0 ? void 0 : (_line$props$dangerous = _line$props.dangerouslySetInnerHTML) === null || _line$props$dangerous === void 0 ? void 0 : _line$props$dangerous.__html) === 'string' ? line.props.dangerouslySetInnerHTML.__html.match(/(Instagram|TikTok|YouTube|Twitter|Snapchat)/i) : null;\n    if (platformMatch) {\n      // If we have an existing group, add it to our results\n      if (currentGroup.length > 0) {\n        groupedContent.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `platform-group ${currentPlatform.toLowerCase()}`,\n          children: currentGroup\n        }, `group-${currentPlatform}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this));\n      }\n\n      // Start a new group with this platform\n      currentPlatform = platformMatch[1];\n      currentGroup = [line];\n    } else {\n      // Add to current group\n      currentGroup.push(line);\n    }\n  });\n\n  // Add the last group if it exists\n  if (currentGroup.length > 0 && currentPlatform) {\n    groupedContent.push(/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `platform-group ${currentPlatform.toLowerCase()}`,\n      children: currentGroup\n    }, `group-${currentPlatform}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"social-media-content\",\n    children: groupedContent.length > 0 ? groupedContent : formattedLines\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_c = SocialMediaMessage;\nexport default SocialMediaMessage;\nvar _c;\n$RefreshReg$(_c, \"SocialMediaMessage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SocialMediaMessage","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isPlatformHeader","text","includes","normalizedContent","replace","platformIndicators","forEach","indicator","trim","startsWith","RegExp","lines","split","formattedLines","map","line","index","processedLine","formattedLine","dangerouslySetInnerHTML","__html","groupedContent","currentPlatform","currentGroup","_line$props","_line$props$dangerous","platformMatch","props","match","length","push","toLowerCase","_c","$RefreshReg$"],"sources":["/Users/ryanmorrison/Code/narrativeforge/src/components/SocialMediaMessage.js"],"sourcesContent":["import React from 'react';\n\n/**\n * Component for rendering social media messages in a line-by-line format\n * \n * @param {Object} props - Component props\n * @param {string} props.content - The social media content to render\n * @returns {JSX.Element} - Rendered social media message\n */\nconst SocialMediaMessage = ({ content }) => {\n  if (!content || typeof content !== 'string') {\n    return <div className=\"social-media-content\">Invalid content</div>;\n  }\n  \n  // Helper function to identify platform headers\n  const isPlatformHeader = (text) => {\n    return text.includes('📱 Instagram') || \n           text.includes('🎵 TikTok') || \n           text.includes('▶️ YouTube') || \n           text.includes('🐦 Twitter') || \n           text.includes('👻 Snapchat');\n  };\n  \n  // Normalize line breaks and add extra breaks around platform headers\n  let normalizedContent = content.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n  \n  // Add extra line breaks around platform indicators\n  const platformIndicators = ['📱 Instagram', '🎵 TikTok', '▶️ YouTube', '🐦 Twitter', '👻 Snapchat'];\n  platformIndicators.forEach(indicator => {\n    // Don't add a leading break if this indicator starts the content\n    if (normalizedContent.trim().startsWith(indicator)) {\n      normalizedContent = normalizedContent;\n    } else {\n      normalizedContent = normalizedContent.replace(new RegExp(indicator, 'g'), '\\n\\n' + indicator);\n    }\n  });\n  \n  // Split content into lines\n  const lines = normalizedContent.split('\\n');\n  \n  // Format individual lines with special styling\n  const formattedLines = lines.map((line, index) => {\n    // Remove markdown bold formatting first\n    let processedLine = line.replace(/\\*\\*([^*]+)\\*\\*/g, '$1');\n    \n    // Apply basic formatting\n    const formattedLine = processedLine\n      .replace(/Instagram/g, '📱 Instagram')\n      .replace(/TikTok/g, '🎵 TikTok')\n      .replace(/YouTube/g, '▶️ YouTube')\n      .replace(/Twitter/g, '🐦 Twitter')\n      .replace(/Snapchat/g, '👻 Snapchat')\n      .replace(/@([a-zA-Z0-9_]+)/g, '<span class=\"handle\">@$1</span>')\n      .replace(/\"([^\"]+)\"/g, '<span class=\"quote\">\"$1\"</span>')\n      .replace(/\\bviral\\b/gi, '<span class=\"highlight\">viral</span>')\n      .replace(/(\\d+)k?\\s*followers/gi, '$1k followers 👥')\n      .replace(/(\\d+)k?\\s*likes/gi, '$1k likes ❤️')\n      .replace(/(\\d+)k?\\s*views/gi, '$1k views 👁️')\n      .replace(/(\\d+)k?\\s*shares/gi, '$1k shares 🔄')\n      .replace(/(\\d+)k?\\s*comments/gi, '$1k comments 💬');\n    \n    // Check if line is a platform header (includes a platform name)\n    if (isPlatformHeader(formattedLine)) {\n      return (\n        <div key={index} className=\"platform-header\">\n          <span dangerouslySetInnerHTML={{ __html: formattedLine }} />\n        </div>\n      );\n    }\n    \n    // Create an empty spacer div if line is empty\n    if (formattedLine.trim() === '') {\n      return <div key={index} className=\"message-spacer\"></div>;\n    }\n    \n    // Regular message line\n    return (\n      <div key={index} className=\"social-media-message\">\n        <span dangerouslySetInnerHTML={{ __html: formattedLine }} />\n      </div>\n    );\n  });\n  \n  // Group messages by platform to create better visual separation\n  const groupedContent = [];\n  let currentPlatform = null;\n  let currentGroup = [];\n\n  formattedLines.forEach((line, index) => {\n    // Check if this line is a new platform header\n    const platformMatch = typeof line.props?.dangerouslySetInnerHTML?.__html === 'string' ? \n      line.props.dangerouslySetInnerHTML.__html.match(/(Instagram|TikTok|YouTube|Twitter|Snapchat)/i) : null;\n    \n    if (platformMatch) {\n      // If we have an existing group, add it to our results\n      if (currentGroup.length > 0) {\n        groupedContent.push(\n          <div key={`group-${currentPlatform}`} className={`platform-group ${currentPlatform.toLowerCase()}`}>\n            {currentGroup}\n          </div>\n        );\n      }\n      \n      // Start a new group with this platform\n      currentPlatform = platformMatch[1];\n      currentGroup = [line];\n    } else {\n      // Add to current group\n      currentGroup.push(line);\n    }\n  });\n  \n  // Add the last group if it exists\n  if (currentGroup.length > 0 && currentPlatform) {\n    groupedContent.push(\n      <div key={`group-${currentPlatform}`} className={`platform-group ${currentPlatform.toLowerCase()}`}>\n        {currentGroup}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"social-media-content\">\n      {groupedContent.length > 0 ? groupedContent : formattedLines}\n    </div>\n  );\n};\n\nexport default SocialMediaMessage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}