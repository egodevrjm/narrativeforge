{"ast":null,"code":"var _jsxFileName = \"/Users/ryanmorrison/Code/narrativeforge/src/components/ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatInterface.css';\nimport VoiceSelector from './VoiceSelector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  character,\n  scenario,\n  geminiService,\n  elevenLabsService,\n  isVoiceEnabled,\n  onSaveChat,\n  onReset\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [messageType, setMessageType] = useState('dialogue'); // dialogue, action, thought\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Voice-related state\n  const [selectedVoice, setSelectedVoice] = useState(null);\n  const [showVoiceSelector, setShowVoiceSelector] = useState(false);\n  const [isPlayingVoice, setIsPlayingVoice] = useState(false);\n  const [currentlyPlayingMessageIndex, setCurrentlyPlayingMessageIndex] = useState(null);\n  const [autoplayEnabled, setAutoplayEnabled] = useState(true); // Default to enabled\n\n  // Speech-to-text state\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const recordedChunks = useRef([]);\n\n  // Initialize with system message\n  useEffect(() => {\n    if (character && scenario) {\n      // Clear any existing messages to prevent story contamination\n      setMessages([]);\n\n      // Small timeout to ensure everything is reset\n      setTimeout(() => {\n        setMessages([{\n          role: 'system',\n          content: `Scenario initialized: ${scenario.title || 'Untitled'}. Character: ${character.name || 'Unnamed'}. Ready to begin roleplay.`,\n          timestamp: new Date().toISOString()\n        }]);\n\n        // Generate initial AI response if geminiService is available\n        if (geminiService) {\n          // Make sure the service is properly initialized\n          geminiService.reset();\n          geminiService.initialize(character, scenario);\n          handleAIResponse();\n        }\n      }, 200);\n    }\n  }, [character, scenario]);\n\n  // Scroll to bottom when messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const handleAIResponse = async () => {\n    if (!geminiService) return;\n    setIsLoading(true);\n    try {\n      // Provide a very explicit instruction to start the roleplay correctly\n      const scenarioTitle = (scenario === null || scenario === void 0 ? void 0 : scenario.title) || 'Untitled';\n      const initialSituation = (scenario === null || scenario === void 0 ? void 0 : scenario.initialSituation) || 'Not specified';\n      const response = await geminiService.generateResponse(`Begin a new roleplay for \"${scenarioTitle}\" with NO references to any other stories or narratives. Set the scene EXACTLY as described in this initial situation: \"${initialSituation}\". Start the narrative at precisely this moment with no previous events assumed. DO NOT introduce elements from any other stories, scenarios, or previous conversations.`, \"system\");\n      const assistantMessage = {\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n\n      // Generate and play voice if enabled and autoplay is on\n      if (isVoiceEnabled && elevenLabsService && selectedVoice && autoplayEnabled) {\n        try {\n          playMessageAudio(response, messages.length);\n        } catch (voiceError) {\n          console.error('Error generating voice:', voiceError);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        role: 'system',\n        content: 'Error: Could not generate AI response. Please check your API key or try again later.',\n        timestamp: new Date().toISOString(),\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading || !geminiService) return;\n    const newMessage = {\n      role: 'user',\n      content: inputValue,\n      type: messageType,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    try {\n      const response = await geminiService.generateResponse(inputValue, messageType);\n      const assistantMessage = {\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      };\n      const newMessages = [...messages, newMessage, assistantMessage];\n      setMessages(newMessages);\n\n      // Generate and play voice if enabled and autoplay is on\n      if (isVoiceEnabled && elevenLabsService && selectedVoice && autoplayEnabled) {\n        try {\n          playMessageAudio(response, newMessages.length - 1);\n        } catch (voiceError) {\n          console.error('Error generating voice:', voiceError);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        role: 'system',\n        content: 'Error: Could not generate AI response. Please try again.',\n        timestamp: new Date().toISOString(),\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Auto-resize textarea based on content\n  const handleTextareaInput = e => {\n    setInputValue(e.target.value);\n\n    // Auto-resize logic\n    const textarea = e.target;\n    textarea.style.height = 'auto';\n    const newHeight = Math.max(50, Math.min(150, textarea.scrollHeight));\n    textarea.style.height = `${newHeight}px`;\n  };\n\n  // Load available voices when ElevenLabs service is initialized\n  useEffect(() => {\n    if (elevenLabsService && isVoiceEnabled) {\n      const loadVoices = async () => {\n        try {\n          const voices = await elevenLabsService.getVoices();\n          if (voices.length > 0 && !selectedVoice) {\n            // Default to first voice\n            setSelectedVoice(voices[0]);\n          }\n        } catch (error) {\n          console.error('Error loading voices:', error);\n        }\n      };\n      loadVoices();\n    }\n  }, [elevenLabsService, isVoiceEnabled]);\n\n  // Load stored settings from localStorage\n  useEffect(() => {\n    // Load autoplay setting\n    const savedAutoplay = localStorage.getItem('voice_autoplay');\n    if (savedAutoplay !== null) {\n      setAutoplayEnabled(savedAutoplay === 'true');\n    }\n  }, []);\n\n  // Save autoplay setting to localStorage when it changes\n  useEffect(() => {\n    localStorage.setItem('voice_autoplay', autoplayEnabled.toString());\n  }, [autoplayEnabled]);\n\n  // Handle microphone access and start recording\n  const startRecording = async () => {\n    try {\n      // Request access to the microphone\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n\n      // Create a media recorder\n      const recorder = new MediaRecorder(stream);\n      setMediaRecorder(recorder);\n\n      // Handle data available events\n      recorder.ondataavailable = e => {\n        if (e.data.size > 0) {\n          recordedChunks.current.push(e.data);\n        }\n      };\n\n      // Handle recording stop event\n      recorder.onstop = async () => {\n        const audioBlob = new Blob(recordedChunks.current, {\n          type: 'audio/webm'\n        });\n        recordedChunks.current = [];\n\n        // Stop all tracks to release the microphone\n        stream.getTracks().forEach(track => track.stop());\n\n        // Convert speech to text if ElevenLabs is enabled\n        if (elevenLabsService && isVoiceEnabled) {\n          try {\n            setIsLoading(true);\n            const transcribedText = await elevenLabsService.speechToText(audioBlob);\n            if (transcribedText) {\n              setInputValue(transcribedText);\n            } else {\n              console.warn('No text transcribed from audio');\n            }\n          } catch (error) {\n            console.error('Speech-to-text error:', error);\n            // Show error message to user\n            alert('Could not convert speech to text. Please try again or type your message.');\n          } finally {\n            setIsLoading(false);\n          }\n        }\n      };\n\n      // Start recording\n      recorder.start();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      alert('Could not access microphone. Please check your browser permissions.');\n    }\n  };\n\n  // Stop recording\n  const stopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n      setIsRecording(false);\n    }\n  };\n\n  // Handle selecting a voice\n  const handleSelectVoice = voice => {\n    setSelectedVoice(voice);\n    setShowVoiceSelector(false);\n  };\n\n  // Add a function to play a specific message\n  const playMessageAudio = async (messageContent, messageIndex) => {\n    if (isPlayingVoice || !elevenLabsService || !selectedVoice || !isVoiceEnabled) return;\n    try {\n      setIsPlayingVoice(true);\n      setCurrentlyPlayingMessageIndex(messageIndex);\n      const audioBlob = await elevenLabsService.textToSpeech(messageContent, selectedVoice.voice_id);\n\n      // Set up an event listener for when audio ends\n      const handleAudioEnd = () => {\n        setIsPlayingVoice(false);\n        setCurrentlyPlayingMessageIndex(null);\n        if (elevenLabsService.currentAudio) {\n          elevenLabsService.currentAudio.removeEventListener('ended', handleAudioEnd);\n        }\n      };\n      const audio = elevenLabsService.playAudio(audioBlob);\n      audio.addEventListener('ended', handleAudioEnd);\n    } catch (error) {\n      console.error('Error playing message audio:', error);\n      setIsPlayingVoice(false);\n      setCurrentlyPlayingMessageIndex(null);\n    }\n  };\n\n  // Function to stop all audio playback\n  const stopAllAudio = () => {\n    if (elevenLabsService) {\n      elevenLabsService.stopAudio();\n      setIsPlayingVoice(false);\n      setCurrentlyPlayingMessageIndex(null);\n    }\n  };\n\n  // Stop any playing audio when component unmounts\n  useEffect(() => {\n    return () => {\n      if (elevenLabsService) {\n        elevenLabsService.stopAudio();\n      }\n    };\n  }, [elevenLabsService]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"character-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: (character === null || character === void 0 ? void 0 : character.name) || 'Unnamed Character'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"scenario-title\",\n          children: (scenario === null || scenario === void 0 ? void 0 : scenario.title) || 'Untitled Scenario'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-controls\",\n        children: [isVoiceEnabled && elevenLabsService && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `voice-btn ${isPlayingVoice ? 'voice-playing' : ''}`,\n          onClick: () => setShowVoiceSelector(!showVoiceSelector),\n          title: \"Voice Settings\",\n          type: \"button\",\n          children: [isPlayingVoice ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"voice-playing-indicator\",\n            children: \"\\uD83D\\uDD0A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\uD83C\\uDFA4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 17\n          }, this), selectedVoice ? selectedVoice.name : 'Select Voice']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: () => typeof onSaveChat === 'function' && onSaveChat(messages),\n          type: \"button\",\n          children: \"Save Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-btn\",\n          onClick: onReset,\n          type: \"button\",\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), showVoiceSelector && elevenLabsService && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-selector-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-selector-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"voice-selector-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Voice Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-voice-selector\",\n            onClick: () => setShowVoiceSelector(false),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"voice-settings-controls\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"autoplay-toggle\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: autoplayEnabled,\n                onChange: e => setAutoplayEnabled(e.target.checked)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Autoplay voice responses\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"voice-selector-title\",\n          children: \"Select Voice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(VoiceSelector, {\n          elevenLabsApiKey: elevenLabsService.apiKey,\n          selectedVoice: selectedVoice,\n          onSelectVoice: handleSelectVoice,\n          isLoading: isPlayingVoice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.role === 'user' ? 'user-message' : message.role === 'assistant' ? 'ai-message' : 'system-message'} ${message.error ? 'error-message' : ''} ${currentlyPlayingMessageIndex === index ? 'currently-playing' : ''}`,\n        children: [message.role === 'user' && message.type && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-type-tag\",\n          children: message.type === 'dialogue' ? 'Dialogue' : message.type === 'action' ? 'Action' : message.type === 'thought' ? 'Thought' : 'Message'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }, this), message.role === 'assistant' && isVoiceEnabled && elevenLabsService && selectedVoice && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-voice-control\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => playMessageAudio(message.content, index),\n            disabled: isPlayingVoice,\n            className: \"play-message-btn\",\n            title: \"Play message\",\n            children: currentlyPlayingMessageIndex === index ? '🔊 Playing...' : '🔊 Play'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-type-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: `type-btn ${messageType === 'dialogue' ? 'active' : ''}`,\n          onClick: () => setMessageType('dialogue'),\n          children: \"Dialogue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: `type-btn ${messageType === 'action' ? 'active' : ''}`,\n          onClick: () => setMessageType('action'),\n          children: \"Action\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: `type-btn ${messageType === 'thought' ? 'active' : ''}`,\n          onClick: () => setMessageType('thought'),\n          children: \"Thought\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this), isVoiceEnabled && elevenLabsService && isPlayingVoice && /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"stop-voice-btn\",\n        onClick: stopAllAudio,\n        title: \"Stop Voice\",\n        children: \"Stop Voice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-input-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            value: inputValue,\n            onChange: e => setInputValue(e.target.value),\n            onKeyDown: handleKeyPress,\n            placeholder: messageType === 'dialogue' ? 'Type your dialogue...' : messageType === 'action' ? 'Describe your action...' : messageType === 'thought' ? 'Share your thoughts...' : 'Type your message...',\n            rows: 1,\n            style: {\n              height: Math.max(50, Math.min(150, inputValue.split('\\n').length * 24 + 24)) + 'px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 13\n          }, this), isVoiceEnabled && elevenLabsService && /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `voice-input-btn ${isRecording ? 'recording' : ''}`,\n            onClick: isRecording ? stopRecording : startRecording,\n            title: isRecording ? \"Stop recording\" : \"Record voice input\",\n            children: isRecording ? '⏹️' : '🎙️'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 15\n          }, this), inputValue.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"input-helper\",\n            children: \"Press Enter to send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"send-btn\",\n          onClick: handleSendMessage,\n          disabled: isLoading || !inputValue.trim(),\n          \"aria-label\": \"Send message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 319,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"zuAOJPyocNry0DJo36zH1I7sDVc=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","VoiceSelector","jsxDEV","_jsxDEV","ChatInterface","character","scenario","geminiService","elevenLabsService","isVoiceEnabled","onSaveChat","onReset","_s","messages","setMessages","inputValue","setInputValue","messageType","setMessageType","isLoading","setIsLoading","messagesEndRef","selectedVoice","setSelectedVoice","showVoiceSelector","setShowVoiceSelector","isPlayingVoice","setIsPlayingVoice","currentlyPlayingMessageIndex","setCurrentlyPlayingMessageIndex","autoplayEnabled","setAutoplayEnabled","isRecording","setIsRecording","mediaRecorder","setMediaRecorder","recordedChunks","setTimeout","role","content","title","name","timestamp","Date","toISOString","reset","initialize","handleAIResponse","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","scenarioTitle","initialSituation","response","generateResponse","assistantMessage","prev","playMessageAudio","length","voiceError","console","error","handleSendMessage","trim","newMessage","type","newMessages","handleKeyPress","e","key","shiftKey","preventDefault","handleTextareaInput","target","value","textarea","style","height","newHeight","Math","max","min","scrollHeight","loadVoices","voices","getVoices","savedAutoplay","localStorage","getItem","setItem","toString","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","ondataavailable","data","size","push","onstop","audioBlob","Blob","getTracks","forEach","track","stop","transcribedText","speechToText","warn","alert","start","stopRecording","state","handleSelectVoice","voice","messageContent","messageIndex","textToSpeech","voice_id","handleAudioEnd","currentAudio","removeEventListener","playAudio","addEventListener","stopAllAudio","stopAudio","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","checked","onChange","elevenLabsApiKey","apiKey","onSelectVoice","map","message","index","disabled","ref","onKeyDown","placeholder","rows","split","_c","$RefreshReg$"],"sources":["/Users/ryanmorrison/Code/narrativeforge/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './ChatInterface.css';\nimport VoiceSelector from './VoiceSelector';\n\nconst ChatInterface = ({ character, scenario, geminiService, elevenLabsService, isVoiceEnabled, onSaveChat, onReset }) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [messageType, setMessageType] = useState('dialogue'); // dialogue, action, thought\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  \n  // Voice-related state\n  const [selectedVoice, setSelectedVoice] = useState(null);\n  const [showVoiceSelector, setShowVoiceSelector] = useState(false);\n  const [isPlayingVoice, setIsPlayingVoice] = useState(false);\n  const [currentlyPlayingMessageIndex, setCurrentlyPlayingMessageIndex] = useState(null);\n  const [autoplayEnabled, setAutoplayEnabled] = useState(true); // Default to enabled\n  \n  // Speech-to-text state\n  const [isRecording, setIsRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const recordedChunks = useRef([]);\n\n  // Initialize with system message\n  useEffect(() => {\n    if (character && scenario) {\n      // Clear any existing messages to prevent story contamination\n      setMessages([]);\n      \n      // Small timeout to ensure everything is reset\n      setTimeout(() => {\n        setMessages([\n          {\n            role: 'system',\n            content: `Scenario initialized: ${scenario.title || 'Untitled'}. Character: ${character.name || 'Unnamed'}. Ready to begin roleplay.`,\n            timestamp: new Date().toISOString()\n          }\n        ]);\n        \n        // Generate initial AI response if geminiService is available\n        if (geminiService) {\n          // Make sure the service is properly initialized\n          geminiService.reset();\n          geminiService.initialize(character, scenario);\n          handleAIResponse();\n        }\n      }, 200);\n    }\n  }, [character, scenario]);\n\n  // Scroll to bottom when messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const handleAIResponse = async () => {\n    if (!geminiService) return;\n    \n    setIsLoading(true);\n    \n    try {\n      // Provide a very explicit instruction to start the roleplay correctly\n      const scenarioTitle = scenario?.title || 'Untitled';\n      const initialSituation = scenario?.initialSituation || 'Not specified';\n      \n      const response = await geminiService.generateResponse(\n        `Begin a new roleplay for \"${scenarioTitle}\" with NO references to any other stories or narratives. Set the scene EXACTLY as described in this initial situation: \"${initialSituation}\". Start the narrative at precisely this moment with no previous events assumed. DO NOT introduce elements from any other stories, scenarios, or previous conversations.`, \n        \"system\"\n      );\n      \n      const assistantMessage = {\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      };\n      \n      setMessages(prev => [...prev, assistantMessage]);\n      \n      // Generate and play voice if enabled and autoplay is on\n      if (isVoiceEnabled && elevenLabsService && selectedVoice && autoplayEnabled) {\n        try {\n          playMessageAudio(response, messages.length);\n        } catch (voiceError) {\n          console.error('Error generating voice:', voiceError);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        role: 'system',\n        content: 'Error: Could not generate AI response. Please check your API key or try again later.',\n        timestamp: new Date().toISOString(),\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading || !geminiService) return;\n    \n    const newMessage = {\n      role: 'user',\n      content: inputValue,\n      type: messageType,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages(prev => [...prev, newMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    \n    try {\n      const response = await geminiService.generateResponse(inputValue, messageType);\n      \n      const assistantMessage = {\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      };\n      \n      const newMessages = [...messages, newMessage, assistantMessage];\n      setMessages(newMessages);\n      \n      // Generate and play voice if enabled and autoplay is on\n      if (isVoiceEnabled && elevenLabsService && selectedVoice && autoplayEnabled) {\n        try {\n          playMessageAudio(response, newMessages.length - 1);\n        } catch (voiceError) {\n          console.error('Error generating voice:', voiceError);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        role: 'system',\n        content: 'Error: Could not generate AI response. Please try again.',\n        timestamp: new Date().toISOString(),\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n  \n  // Auto-resize textarea based on content\n  const handleTextareaInput = (e) => {\n    setInputValue(e.target.value);\n    \n    // Auto-resize logic\n    const textarea = e.target;\n    textarea.style.height = 'auto';\n    const newHeight = Math.max(50, Math.min(150, textarea.scrollHeight));\n    textarea.style.height = `${newHeight}px`;\n  };\n\n  // Load available voices when ElevenLabs service is initialized\n  useEffect(() => {\n    if (elevenLabsService && isVoiceEnabled) {\n      const loadVoices = async () => {\n        try {\n          const voices = await elevenLabsService.getVoices();\n          if (voices.length > 0 && !selectedVoice) {\n            // Default to first voice\n            setSelectedVoice(voices[0]);\n          }\n        } catch (error) {\n          console.error('Error loading voices:', error);\n        }\n      };\n      \n      loadVoices();\n    }\n  }, [elevenLabsService, isVoiceEnabled]);\n  \n  // Load stored settings from localStorage\n  useEffect(() => {\n    // Load autoplay setting\n    const savedAutoplay = localStorage.getItem('voice_autoplay');\n    if (savedAutoplay !== null) {\n      setAutoplayEnabled(savedAutoplay === 'true');\n    }\n  }, []);\n  \n  // Save autoplay setting to localStorage when it changes\n  useEffect(() => {\n    localStorage.setItem('voice_autoplay', autoplayEnabled.toString());\n  }, [autoplayEnabled]);\n  \n  // Handle microphone access and start recording\n  const startRecording = async () => {\n    try {\n      // Request access to the microphone\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      // Create a media recorder\n      const recorder = new MediaRecorder(stream);\n      setMediaRecorder(recorder);\n      \n      // Handle data available events\n      recorder.ondataavailable = (e) => {\n        if (e.data.size > 0) {\n          recordedChunks.current.push(e.data);\n        }\n      };\n      \n      // Handle recording stop event\n      recorder.onstop = async () => {\n        const audioBlob = new Blob(recordedChunks.current, { type: 'audio/webm' });\n        recordedChunks.current = [];\n        \n        // Stop all tracks to release the microphone\n        stream.getTracks().forEach(track => track.stop());\n        \n        // Convert speech to text if ElevenLabs is enabled\n        if (elevenLabsService && isVoiceEnabled) {\n          try {\n            setIsLoading(true);\n            const transcribedText = await elevenLabsService.speechToText(audioBlob);\n            \n            if (transcribedText) {\n              setInputValue(transcribedText);\n            } else {\n              console.warn('No text transcribed from audio');\n            }\n          } catch (error) {\n            console.error('Speech-to-text error:', error);\n            // Show error message to user\n            alert('Could not convert speech to text. Please try again or type your message.');\n          } finally {\n            setIsLoading(false);\n          }\n        }\n      };\n      \n      // Start recording\n      recorder.start();\n      setIsRecording(true);\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      alert('Could not access microphone. Please check your browser permissions.');\n    }\n  };\n  \n  // Stop recording\n  const stopRecording = () => {\n    if (mediaRecorder && mediaRecorder.state === 'recording') {\n      mediaRecorder.stop();\n      setIsRecording(false);\n    }\n  };\n  \n  // Handle selecting a voice\n  const handleSelectVoice = (voice) => {\n    setSelectedVoice(voice);\n    setShowVoiceSelector(false);\n  };\n  \n  // Add a function to play a specific message\n  const playMessageAudio = async (messageContent, messageIndex) => {\n    if (isPlayingVoice || !elevenLabsService || !selectedVoice || !isVoiceEnabled) return;\n    \n    try {\n      setIsPlayingVoice(true);\n      setCurrentlyPlayingMessageIndex(messageIndex);\n      \n      const audioBlob = await elevenLabsService.textToSpeech(messageContent, selectedVoice.voice_id);\n      \n      // Set up an event listener for when audio ends\n      const handleAudioEnd = () => {\n        setIsPlayingVoice(false);\n        setCurrentlyPlayingMessageIndex(null);\n        if (elevenLabsService.currentAudio) {\n          elevenLabsService.currentAudio.removeEventListener('ended', handleAudioEnd);\n        }\n      };\n      \n      const audio = elevenLabsService.playAudio(audioBlob);\n      audio.addEventListener('ended', handleAudioEnd);\n      \n    } catch (error) {\n      console.error('Error playing message audio:', error);\n      setIsPlayingVoice(false);\n      setCurrentlyPlayingMessageIndex(null);\n    }\n  };\n  \n  // Function to stop all audio playback\n  const stopAllAudio = () => {\n    if (elevenLabsService) {\n      elevenLabsService.stopAudio();\n      setIsPlayingVoice(false);\n      setCurrentlyPlayingMessageIndex(null);\n    }\n  };\n  \n  // Stop any playing audio when component unmounts\n  useEffect(() => {\n    return () => {\n      if (elevenLabsService) {\n        elevenLabsService.stopAudio();\n      }\n    };\n  }, [elevenLabsService]);\n  \n  return (\n    <div className=\"chat-interface\">\n      <div className=\"chat-header\">\n        <div className=\"character-info\">\n          <h2>{character?.name || 'Unnamed Character'}</h2>\n          <p className=\"scenario-title\">{scenario?.title || 'Untitled Scenario'}</p>\n        </div>\n        <div className=\"chat-controls\">\n          {isVoiceEnabled && elevenLabsService && (\n            <button \n              className={`voice-btn ${isPlayingVoice ? 'voice-playing' : ''}`}\n              onClick={() => setShowVoiceSelector(!showVoiceSelector)}\n              title=\"Voice Settings\"\n              type=\"button\"\n            >\n              {isPlayingVoice ? (\n                <span className=\"voice-playing-indicator\">🔊</span>\n              ) : (\n                <span>🎤</span>\n              )}\n              {selectedVoice ? selectedVoice.name : 'Select Voice'}\n            </button>\n          )}\n          <button \n            className=\"save-btn\" \n            onClick={() => typeof onSaveChat === 'function' && onSaveChat(messages)}\n            type=\"button\"\n          >\n            Save Chat\n          </button>\n          <button \n            className=\"reset-btn\" \n            onClick={onReset}\n            type=\"button\"\n          >\n            Start Over\n          </button>\n        </div>\n      </div>\n      \n      {showVoiceSelector && elevenLabsService && (\n        <div className=\"voice-selector-modal\">\n          <div className=\"voice-selector-content\">\n            <div className=\"voice-selector-header\">\n              <h3>Voice Settings</h3>\n              <button \n                className=\"close-voice-selector\" \n                onClick={() => setShowVoiceSelector(false)}\n              >\n                ×\n              </button>\n            </div>\n            <div className=\"voice-settings-controls\">\n              <div className=\"autoplay-toggle\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={autoplayEnabled}\n                    onChange={(e) => setAutoplayEnabled(e.target.checked)}\n                  />\n                  <span>Autoplay voice responses</span>\n                </label>\n              </div>\n            </div>\n            <div className=\"voice-selector-title\">Select Voice</div>\n            <VoiceSelector\n              elevenLabsApiKey={elevenLabsService.apiKey}\n              selectedVoice={selectedVoice}\n              onSelectVoice={handleSelectVoice}\n              isLoading={isPlayingVoice}\n            />\n          </div>\n        </div>\n      )}\n      \n      <div className=\"chat-messages\">\n        {messages.map((message, index) => (\n          <div \n            key={index} \n            className={`message ${message.role === 'user' ? 'user-message' : message.role === 'assistant' ? 'ai-message' : 'system-message'} ${message.error ? 'error-message' : ''} ${currentlyPlayingMessageIndex === index ? 'currently-playing' : ''}`}\n          >\n            {message.role === 'user' && message.type && (\n              <div className=\"message-type-tag\">\n                {message.type === 'dialogue' ? 'Dialogue' : \n                message.type === 'action' ? 'Action' : \n                message.type === 'thought' ? 'Thought' : 'Message'}\n              </div>\n            )}\n            <div className=\"message-content\">{message.content}</div>\n            \n            {message.role === 'assistant' && isVoiceEnabled && elevenLabsService && selectedVoice && (\n              <div className=\"message-voice-control\">\n                <button \n                  onClick={() => playMessageAudio(message.content, index)}\n                  disabled={isPlayingVoice}\n                  className=\"play-message-btn\"\n                  title=\"Play message\"\n                >\n                  {currentlyPlayingMessageIndex === index ? '🔊 Playing...' : '🔊 Play'}\n                </button>\n              </div>\n            )}\n          </div>\n        ))}\n        \n        {isLoading && (\n          <div className=\"loading-indicator\">\n            <div className=\"typing-indicator\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      <div className=\"chat-input\">\n        <div className=\"message-type-selector\">\n          <button \n            type=\"button\"\n            className={`type-btn ${messageType === 'dialogue' ? 'active' : ''}`}\n            onClick={() => setMessageType('dialogue')}\n          >\n            Dialogue\n          </button>\n          <button \n            type=\"button\"\n            className={`type-btn ${messageType === 'action' ? 'active' : ''}`}\n            onClick={() => setMessageType('action')}\n          >\n            Action\n          </button>\n          <button \n            type=\"button\"\n            className={`type-btn ${messageType === 'thought' ? 'active' : ''}`}\n            onClick={() => setMessageType('thought')}\n          >\n            Thought\n          </button>\n        </div>\n        \n        {isVoiceEnabled && elevenLabsService && isPlayingVoice && (\n          <button \n            type=\"button\"\n            className=\"stop-voice-btn\"\n            onClick={stopAllAudio}\n            title=\"Stop Voice\"\n          >\n            Stop Voice\n          </button>\n        )}\n        \n        <div className=\"message-input-row\">\n          <div className=\"input-wrapper\">\n            <textarea \n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyDown={handleKeyPress}\n              placeholder={messageType === 'dialogue' ? 'Type your dialogue...' : \n                          messageType === 'action' ? 'Describe your action...' : \n                          messageType === 'thought' ? 'Share your thoughts...' :\n                          'Type your message...'}\n              rows={1}\n              style={{ height: Math.max(50, Math.min(150, inputValue.split('\\n').length * 24 + 24)) + 'px' }}\n            />\n            {isVoiceEnabled && elevenLabsService && (\n              <button\n                type=\"button\"\n                className={`voice-input-btn ${isRecording ? 'recording' : ''}`}\n                onClick={isRecording ? stopRecording : startRecording}\n                title={isRecording ? \"Stop recording\" : \"Record voice input\"}\n              >\n                {isRecording ? '⏹️' : '🎙️'}\n              </button>\n            )}\n            {inputValue.length > 0 && (\n              <div className=\"input-helper\">\n                Press Enter to send\n              </div>\n            )}\n          </div>\n          \n          <button \n            type=\"button\"\n            className=\"send-btn\"\n            onClick={handleSendMessage}\n            disabled={isLoading || !inputValue.trim()}\n            aria-label=\"Send message\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}