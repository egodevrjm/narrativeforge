{"ast":null,"code":"var _jsxFileName = \"/Users/ryanmorrison/Code/narrativeforge/src/components/ChatInterface.js\",\n  _s = $RefreshSig$();\n// Add a function to play a specific message\nconst playMessageAudio = async (messageContent, messageIndex) => {\n  if (isPlayingVoice || !elevenLabsService || !selectedVoice || !isVoiceEnabled) return;\n  try {\n    setIsPlayingVoice(true);\n    setCurrentlyPlayingMessageIndex(messageIndex);\n    const audioBlob = await elevenLabsService.textToSpeech(messageContent, selectedVoice.voice_id);\n\n    // Set up an event listener for when audio ends\n    const handleAudioEnd = () => {\n      setIsPlayingVoice(false);\n      setCurrentlyPlayingMessageIndex(null);\n      elevenLabsService.currentAudio.removeEventListener('ended', handleAudioEnd);\n    };\n    const audio = elevenLabsService.playAudio(audioBlob);\n    audio.addEventListener('ended', handleAudioEnd);\n  } catch (error) {\n    console.error('Error playing message audio:', error);\n    setIsPlayingVoice(false);\n    setCurrentlyPlayingMessageIndex(null);\n  }\n};\n\n// Function to stop all audio playback\nconst stopAllAudio = () => {\n  if (elevenLabsService) {\n    elevenLabsService.stopAudio();\n    setIsPlayingVoice(false);\n    setCurrentlyPlayingMessageIndex(null);\n  }\n};\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatInterface.css';\nimport VoiceSelector from './VoiceSelector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  character,\n  scenario,\n  geminiService,\n  elevenLabsService,\n  isVoiceEnabled,\n  onSaveChat,\n  onReset\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [messageType, setMessageType] = useState('dialogue'); // dialogue, action, thought\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Voice-related state\n  const [selectedVoice, setSelectedVoice] = useState(null);\n  const [showVoiceSelector, setShowVoiceSelector] = useState(false);\n  const [isPlayingVoice, setIsPlayingVoice] = useState(false);\n  const [currentlyPlayingMessageIndex, setCurrentlyPlayingMessageIndex] = useState(null);\n\n  // Initialize with system message\n  useEffect(() => {\n    if (character && scenario) {\n      // Clear any existing messages to prevent story contamination\n      setMessages([]);\n\n      // Small timeout to ensure everything is reset\n      setTimeout(() => {\n        setMessages([{\n          role: 'system',\n          content: `Scenario initialized: ${scenario.title || 'Untitled'}. Character: ${character.name || 'Unnamed'}. Ready to begin roleplay.`,\n          timestamp: new Date().toISOString()\n        }]);\n\n        // Generate initial AI response if geminiService is available\n        if (geminiService) {\n          // Make sure the service is properly initialized\n          geminiService.reset();\n          geminiService.initialize(character, scenario);\n          handleAIResponse();\n        }\n      }, 200);\n    }\n  }, [character, scenario]);\n\n  // Scroll to bottom when messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const handleAIResponse = async () => {\n    if (!geminiService) return;\n    setIsLoading(true);\n    try {\n      // Provide a very explicit instruction to start the roleplay correctly\n      const scenarioTitle = (scenario === null || scenario === void 0 ? void 0 : scenario.title) || 'Untitled';\n      const initialSituation = (scenario === null || scenario === void 0 ? void 0 : scenario.initialSituation) || 'Not specified';\n      const response = await geminiService.generateResponse(`Begin a new roleplay for \"${scenarioTitle}\" with NO references to any other stories or narratives. Set the scene EXACTLY as described in this initial situation: \"${initialSituation}\". Start the narrative at precisely this moment with no previous events assumed. DO NOT introduce elements from any other stories, scenarios, or previous conversations.`, \"system\");\n      const assistantMessage = {\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n\n      // Generate and play voice if enabled\n      if (isVoiceEnabled && elevenLabsService && selectedVoice) {\n        try {\n          setIsPlayingVoice(true);\n          const audioBlob = await elevenLabsService.textToSpeech(response, selectedVoice.voice_id);\n          elevenLabsService.playAudio(audioBlob);\n        } catch (voiceError) {\n          console.error('Error generating voice:', voiceError);\n        } finally {\n          setIsPlayingVoice(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        role: 'system',\n        content: 'Error: Could not generate AI response. Please check your API key or try again later.',\n        timestamp: new Date().toISOString(),\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading || !geminiService) return;\n    const newMessage = {\n      role: 'user',\n      content: inputValue,\n      type: messageType,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    try {\n      const response = await geminiService.generateResponse(inputValue, messageType);\n      const assistantMessage = {\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n\n      // Generate and play voice if enabled\n      if (isVoiceEnabled && elevenLabsService && selectedVoice) {\n        try {\n          setIsPlayingVoice(true);\n          const audioBlob = await elevenLabsService.textToSpeech(response, selectedVoice.voice_id);\n          elevenLabsService.playAudio(audioBlob);\n        } catch (voiceError) {\n          console.error('Error generating voice:', voiceError);\n        } finally {\n          setIsPlayingVoice(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        role: 'system',\n        content: 'Error: Could not generate AI response. Please try again.',\n        timestamp: new Date().toISOString(),\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Load available voices when ElevenLabs service is initialized\n  useEffect(() => {\n    if (elevenLabsService && isVoiceEnabled) {\n      const loadVoices = async () => {\n        try {\n          const voices = await elevenLabsService.getVoices();\n          if (voices.length > 0 && !selectedVoice) {\n            // Default to first voice\n            setSelectedVoice(voices[0]);\n          }\n        } catch (error) {\n          console.error('Error loading voices:', error);\n        }\n      };\n      loadVoices();\n    }\n  }, [elevenLabsService, isVoiceEnabled]);\n\n  // Handle selecting a voice\n  const handleSelectVoice = voice => {\n    setSelectedVoice(voice);\n    setShowVoiceSelector(false);\n  };\n\n  // Add a function to play a specific message\n  const playMessageAudio = async messageContent => {\n    if (isPlayingVoice || !elevenLabsService || !selectedVoice || !isVoiceEnabled) return;\n    try {\n      setIsPlayingVoice(true);\n      const audioBlob = await elevenLabsService.textToSpeech(messageContent, selectedVoice.voice_id);\n      elevenLabsService.playAudio(audioBlob);\n    } catch (error) {\n      console.error('Error playing message audio:', error);\n    } finally {\n      setTimeout(() => setIsPlayingVoice(false), 500); // Small delay to prevent multiple clicks\n    }\n  };\n\n  // Stop any playing audio when component unmounts\n  useEffect(() => {\n    return () => {\n      if (elevenLabsService) {\n        elevenLabsService.stopAudio();\n      }\n    };\n  }, [elevenLabsService]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"character-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: (character === null || character === void 0 ? void 0 : character.name) || 'Unnamed Character'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"scenario-title\",\n          children: (scenario === null || scenario === void 0 ? void 0 : scenario.title) || 'Untitled Scenario'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-controls\",\n        children: [isVoiceEnabled && elevenLabsService && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `voice-btn ${isPlayingVoice ? 'voice-playing' : ''}`,\n          onClick: () => setShowVoiceSelector(!showVoiceSelector),\n          title: \"Voice Settings\",\n          type: \"button\",\n          children: [isPlayingVoice ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"voice-playing-indicator\",\n            children: \"\\uD83D\\uDD0A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\uD83C\\uDFA4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 17\n          }, this), selectedVoice ? selectedVoice.name : 'Select Voice']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: () => typeof onSaveChat === 'function' && onSaveChat(messages),\n          type: \"button\",\n          children: \"Save Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-btn\",\n          onClick: onReset,\n          type: \"button\",\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), showVoiceSelector && elevenLabsService && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-selector-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-selector-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"voice-selector-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Select Voice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-voice-selector\",\n            onClick: () => setShowVoiceSelector(false),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(VoiceSelector, {\n          elevenLabsApiKey: elevenLabsService.apiKey,\n          selectedVoice: selectedVoice,\n          onSelectVoice: handleSelectVoice,\n          isLoading: isPlayingVoice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.role === 'user' ? 'user-message' : message.role === 'assistant' ? 'ai-message' : 'system-message'} ${message.error ? 'error-message' : ''}`,\n        children: [message.role === 'user' && message.type && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-type-tag\",\n          children: message.type === 'dialogue' ? 'Dialogue' : message.type === 'action' ? 'Action' : message.type === 'thought' ? 'Thought' : 'Message'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this), message.role === 'assistant' && isVoiceEnabled && elevenLabsService && selectedVoice && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-voice-control\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => playMessageAudio(message.content),\n            disabled: isPlayingVoice,\n            className: \"play-message-btn\",\n            title: \"Play message\",\n            children: isPlayingVoice ? '🔊 Playing...' : '🔊 Play'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-type-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `type-btn ${messageType === 'dialogue' ? 'active' : ''}`,\n            onClick: () => setMessageType('dialogue'),\n            children: \"Dialogue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `type-btn ${messageType === 'action' ? 'active' : ''}`,\n            onClick: () => setMessageType('action'),\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `type-btn ${messageType === 'thought' ? 'active' : ''}`,\n            onClick: () => setMessageType('thought'),\n            children: \"Thought\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), isVoiceEnabled && elevenLabsService && isPlayingVoice && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"stop-voice-btn\",\n          onClick: () => elevenLabsService.stopAudio(),\n          title: \"Stop Voice\",\n          children: \"Stop Voice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: handleKeyPress,\n          placeholder: messageType === 'dialogue' ? 'Type your dialogue...' : messageType === 'action' ? 'Describe your action...' : messageType === 'thought' ? 'Share your thoughts...' : 'Type your message...',\n          rows: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-helper\",\n          children: inputValue.length > 0 ? 'Press Enter to send or click the button' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"send-btn\",\n        onClick: handleSendMessage,\n        disabled: isLoading || !inputValue.trim(),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"un5tITWO1ilE7Cdl7Q1hC5v1O9g=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["playMessageAudio","messageContent","messageIndex","isPlayingVoice","elevenLabsService","selectedVoice","isVoiceEnabled","setIsPlayingVoice","setCurrentlyPlayingMessageIndex","audioBlob","textToSpeech","voice_id","handleAudioEnd","currentAudio","removeEventListener","audio","playAudio","addEventListener","error","console","stopAllAudio","stopAudio","React","useState","useEffect","useRef","VoiceSelector","jsxDEV","_jsxDEV","ChatInterface","character","scenario","geminiService","onSaveChat","onReset","_s","messages","setMessages","inputValue","setInputValue","messageType","setMessageType","isLoading","setIsLoading","messagesEndRef","setSelectedVoice","showVoiceSelector","setShowVoiceSelector","currentlyPlayingMessageIndex","setTimeout","role","content","title","name","timestamp","Date","toISOString","reset","initialize","handleAIResponse","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","scenarioTitle","initialSituation","response","generateResponse","assistantMessage","prev","voiceError","handleSendMessage","trim","newMessage","type","handleKeyPress","e","key","shiftKey","preventDefault","loadVoices","voices","getVoices","length","handleSelectVoice","voice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","elevenLabsApiKey","apiKey","onSelectVoice","map","message","index","disabled","ref","value","onChange","target","onKeyDown","placeholder","rows","_c","$RefreshReg$"],"sources":["/Users/ryanmorrison/Code/narrativeforge/src/components/ChatInterface.js"],"sourcesContent":["  // Add a function to play a specific message\n  const playMessageAudio = async (messageContent, messageIndex) => {\n    if (isPlayingVoice || !elevenLabsService || !selectedVoice || !isVoiceEnabled) return;\n    \n    try {\n      setIsPlayingVoice(true);\n      setCurrentlyPlayingMessageIndex(messageIndex);\n      const audioBlob = await elevenLabsService.textToSpeech(messageContent, selectedVoice.voice_id);\n      \n      // Set up an event listener for when audio ends\n      const handleAudioEnd = () => {\n        setIsPlayingVoice(false);\n        setCurrentlyPlayingMessageIndex(null);\n        elevenLabsService.currentAudio.removeEventListener('ended', handleAudioEnd);\n      };\n      \n      const audio = elevenLabsService.playAudio(audioBlob);\n      audio.addEventListener('ended', handleAudioEnd);\n      \n    } catch (error) {\n      console.error('Error playing message audio:', error);\n      setIsPlayingVoice(false);\n      setCurrentlyPlayingMessageIndex(null);\n    }\n  };\n  \n  // Function to stop all audio playback\n  const stopAllAudio = () => {\n    if (elevenLabsService) {\n      elevenLabsService.stopAudio();\n      setIsPlayingVoice(false);\n      setCurrentlyPlayingMessageIndex(null);\n    }\n  };import React, { useState, useEffect, useRef } from 'react';\nimport './ChatInterface.css';\nimport VoiceSelector from './VoiceSelector';\n\nconst ChatInterface = ({ character, scenario, geminiService, elevenLabsService, isVoiceEnabled, onSaveChat, onReset }) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [messageType, setMessageType] = useState('dialogue'); // dialogue, action, thought\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  \n  // Voice-related state\n  const [selectedVoice, setSelectedVoice] = useState(null);\n  const [showVoiceSelector, setShowVoiceSelector] = useState(false);\n  const [isPlayingVoice, setIsPlayingVoice] = useState(false);\n  const [currentlyPlayingMessageIndex, setCurrentlyPlayingMessageIndex] = useState(null);\n\n  // Initialize with system message\n  useEffect(() => {\n    if (character && scenario) {\n      // Clear any existing messages to prevent story contamination\n      setMessages([]);\n      \n      // Small timeout to ensure everything is reset\n      setTimeout(() => {\n        setMessages([\n          {\n            role: 'system',\n            content: `Scenario initialized: ${scenario.title || 'Untitled'}. Character: ${character.name || 'Unnamed'}. Ready to begin roleplay.`,\n            timestamp: new Date().toISOString()\n          }\n        ]);\n        \n        // Generate initial AI response if geminiService is available\n        if (geminiService) {\n          // Make sure the service is properly initialized\n          geminiService.reset();\n          geminiService.initialize(character, scenario);\n          handleAIResponse();\n        }\n      }, 200);\n    }\n  }, [character, scenario]);\n\n  // Scroll to bottom when messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const handleAIResponse = async () => {\n    if (!geminiService) return;\n    \n    setIsLoading(true);\n    \n    try {\n      // Provide a very explicit instruction to start the roleplay correctly\n      const scenarioTitle = scenario?.title || 'Untitled';\n      const initialSituation = scenario?.initialSituation || 'Not specified';\n      \n      const response = await geminiService.generateResponse(\n        `Begin a new roleplay for \"${scenarioTitle}\" with NO references to any other stories or narratives. Set the scene EXACTLY as described in this initial situation: \"${initialSituation}\". Start the narrative at precisely this moment with no previous events assumed. DO NOT introduce elements from any other stories, scenarios, or previous conversations.`, \n        \"system\"\n      );\n      \n      const assistantMessage = {\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      };\n      \n      setMessages(prev => [...prev, assistantMessage]);\n      \n      // Generate and play voice if enabled\n      if (isVoiceEnabled && elevenLabsService && selectedVoice) {\n        try {\n          setIsPlayingVoice(true);\n          const audioBlob = await elevenLabsService.textToSpeech(response, selectedVoice.voice_id);\n          elevenLabsService.playAudio(audioBlob);\n        } catch (voiceError) {\n          console.error('Error generating voice:', voiceError);\n        } finally {\n          setIsPlayingVoice(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        role: 'system',\n        content: 'Error: Could not generate AI response. Please check your API key or try again later.',\n        timestamp: new Date().toISOString(),\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading || !geminiService) return;\n    \n    const newMessage = {\n      role: 'user',\n      content: inputValue,\n      type: messageType,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages(prev => [...prev, newMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    \n    try {\n      const response = await geminiService.generateResponse(inputValue, messageType);\n      \n      const assistantMessage = {\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      };\n      \n      setMessages(prev => [...prev, assistantMessage]);\n      \n      // Generate and play voice if enabled\n      if (isVoiceEnabled && elevenLabsService && selectedVoice) {\n        try {\n          setIsPlayingVoice(true);\n          const audioBlob = await elevenLabsService.textToSpeech(response, selectedVoice.voice_id);\n          elevenLabsService.playAudio(audioBlob);\n        } catch (voiceError) {\n          console.error('Error generating voice:', voiceError);\n        } finally {\n          setIsPlayingVoice(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        role: 'system',\n        content: 'Error: Could not generate AI response. Please try again.',\n        timestamp: new Date().toISOString(),\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Load available voices when ElevenLabs service is initialized\n  useEffect(() => {\n    if (elevenLabsService && isVoiceEnabled) {\n      const loadVoices = async () => {\n        try {\n          const voices = await elevenLabsService.getVoices();\n          if (voices.length > 0 && !selectedVoice) {\n            // Default to first voice\n            setSelectedVoice(voices[0]);\n          }\n        } catch (error) {\n          console.error('Error loading voices:', error);\n        }\n      };\n      \n      loadVoices();\n    }\n  }, [elevenLabsService, isVoiceEnabled]);\n  \n  // Handle selecting a voice\n  const handleSelectVoice = (voice) => {\n    setSelectedVoice(voice);\n    setShowVoiceSelector(false);\n  };\n  \n  // Add a function to play a specific message\n  const playMessageAudio = async (messageContent) => {\n    if (isPlayingVoice || !elevenLabsService || !selectedVoice || !isVoiceEnabled) return;\n    \n    try {\n      setIsPlayingVoice(true);\n      const audioBlob = await elevenLabsService.textToSpeech(messageContent, selectedVoice.voice_id);\n      elevenLabsService.playAudio(audioBlob);\n    } catch (error) {\n      console.error('Error playing message audio:', error);\n    } finally {\n      setTimeout(() => setIsPlayingVoice(false), 500); // Small delay to prevent multiple clicks\n    }\n  };\n  \n  // Stop any playing audio when component unmounts\n  useEffect(() => {\n    return () => {\n      if (elevenLabsService) {\n        elevenLabsService.stopAudio();\n      }\n    };\n  }, [elevenLabsService]);\n  \n  return (\n    <div className=\"chat-interface\">\n      <div className=\"chat-header\">\n        <div className=\"character-info\">\n          <h2>{character?.name || 'Unnamed Character'}</h2>\n          <p className=\"scenario-title\">{scenario?.title || 'Untitled Scenario'}</p>\n        </div>\n        <div className=\"chat-controls\">\n          {isVoiceEnabled && elevenLabsService && (\n            <button \n              className={`voice-btn ${isPlayingVoice ? 'voice-playing' : ''}`}\n              onClick={() => setShowVoiceSelector(!showVoiceSelector)}\n              title=\"Voice Settings\"\n              type=\"button\"\n            >\n              {isPlayingVoice ? (\n                <span className=\"voice-playing-indicator\">🔊</span>\n              ) : (\n                <span>🎤</span>\n              )}\n              {selectedVoice ? selectedVoice.name : 'Select Voice'}\n            </button>\n          )}\n          <button \n            className=\"save-btn\" \n            onClick={() => typeof onSaveChat === 'function' && onSaveChat(messages)}\n            type=\"button\"\n          >\n            Save Chat\n          </button>\n          <button \n            className=\"reset-btn\" \n            onClick={onReset}\n            type=\"button\"\n          >\n            Start Over\n          </button>\n        </div>\n      </div>\n      \n      {showVoiceSelector && elevenLabsService && (\n        <div className=\"voice-selector-modal\">\n          <div className=\"voice-selector-content\">\n            <div className=\"voice-selector-header\">\n              <h3>Select Voice</h3>\n              <button \n                className=\"close-voice-selector\" \n                onClick={() => setShowVoiceSelector(false)}\n              >\n                ×\n              </button>\n            </div>\n            <VoiceSelector\n              elevenLabsApiKey={elevenLabsService.apiKey}\n              selectedVoice={selectedVoice}\n              onSelectVoice={handleSelectVoice}\n              isLoading={isPlayingVoice}\n            />\n          </div>\n        </div>\n      )}\n      \n      <div className=\"chat-messages\">\n        {messages.map((message, index) => (\n          <div \n            key={index} \n            className={`message ${message.role === 'user' ? 'user-message' : message.role === 'assistant' ? 'ai-message' : 'system-message'} ${message.error ? 'error-message' : ''}`}\n          >\n            {message.role === 'user' && message.type && (\n              <div className=\"message-type-tag\">\n                {message.type === 'dialogue' ? 'Dialogue' : \n                message.type === 'action' ? 'Action' : \n                message.type === 'thought' ? 'Thought' : 'Message'}\n              </div>\n            )}\n            <div className=\"message-content\">{message.content}</div>\n            \n            {message.role === 'assistant' && isVoiceEnabled && elevenLabsService && selectedVoice && (\n              <div className=\"message-voice-control\">\n                <button \n                  onClick={() => playMessageAudio(message.content)}\n                  disabled={isPlayingVoice}\n                  className=\"play-message-btn\"\n                  title=\"Play message\"\n                >\n                  {isPlayingVoice ? '🔊 Playing...' : '🔊 Play'}\n                </button>\n              </div>\n            )}\n          </div>\n        ))}\n        \n        {isLoading && (\n          <div className=\"loading-indicator\">\n            <div className=\"typing-indicator\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      <div className=\"chat-input\">\n        <div className=\"chat-input-controls\">\n          <div className=\"message-type-selector\">\n            <button \n              type=\"button\"\n              className={`type-btn ${messageType === 'dialogue' ? 'active' : ''}`}\n              onClick={() => setMessageType('dialogue')}\n            >\n              Dialogue\n            </button>\n            <button \n              type=\"button\"\n              className={`type-btn ${messageType === 'action' ? 'active' : ''}`}\n              onClick={() => setMessageType('action')}\n            >\n              Action\n            </button>\n            <button \n              type=\"button\"\n              className={`type-btn ${messageType === 'thought' ? 'active' : ''}`}\n              onClick={() => setMessageType('thought')}\n            >\n              Thought\n            </button>\n          </div>\n          \n          {isVoiceEnabled && elevenLabsService && isPlayingVoice && (\n            <button \n              type=\"button\"\n              className=\"stop-voice-btn\"\n              onClick={() => elevenLabsService.stopAudio()}\n              title=\"Stop Voice\"\n            >\n              Stop Voice\n            </button>\n          )}\n        </div>\n        \n        <div className=\"input-wrapper\">\n          <textarea \n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={handleKeyPress}\n            placeholder={messageType === 'dialogue' ? 'Type your dialogue...' : \n                        messageType === 'action' ? 'Describe your action...' : \n                        messageType === 'thought' ? 'Share your thoughts...' :\n                        'Type your message...'}\n            rows={3}\n          />\n          <div className=\"input-helper\">\n            {inputValue.length > 0 ? 'Press Enter to send or click the button' : ''}\n          </div>\n        </div>\n        \n        <button \n          type=\"button\"\n          className=\"send-btn\"\n          onClick={handleSendMessage}\n          disabled={isLoading || !inputValue.trim()}\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}