{"ast":null,"code":"var _jsxFileName = \"/Users/ryanmorrison/Code/narrativeforge/src/components/ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Send, Settings, Music, BookOpen, ScrollText } from 'lucide-react';\nimport RoleplayInstructions from './RoleplayInstructions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  character,\n  scenario,\n  onSaveChat,\n  geminiService,\n  onReset\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [messageType, setMessageType] = useState('dialogue'); // dialogue, action, thought\n  const [showInstructionsEditor, setShowInstructionsEditor] = useState(false);\n  const [roleplayInstructions, setRoleplayInstructions] = useState((scenario === null || scenario === void 0 ? void 0 : scenario.roleplayInstructions) || '');\n  const messagesEndRef = useRef(null);\n\n  // When scenario changes, update the roleplay instructions\n  useEffect(() => {\n    if (scenario && scenario.roleplayInstructions) {\n      setRoleplayInstructions(scenario.roleplayInstructions);\n    }\n  }, [scenario]);\n\n  // Initial system message when the scenario begins\n  useEffect(() => {\n    if (scenario && !messages.length) {\n      // Create initial narrative message describing the scenario\n      const initialMessage = {\n        id: Date.now(),\n        type: 'system',\n        content: scenario.initialSituation,\n        timestamp: new Date()\n      };\n      setMessages([initialMessage]);\n\n      // If there are roleplay instructions, set them but DON'T add them as a visible message\n      if (scenario.roleplayInstructions) {\n        setRoleplayInstructions(scenario.roleplayInstructions);\n      }\n\n      // Simulate AI thinking and then responding to set the scene\n      handleAiResponse();\n    }\n  }, [scenario]);\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n\n  // Save roleplay instructions\n  const saveRoleplayInstructions = instructions => {\n    setRoleplayInstructions(instructions);\n    setShowInstructionsEditor(false);\n\n    // Don't add to visible messages, but update the AI context\n    if (geminiService) {\n      geminiService.updateInstructions(instructions);\n    }\n  };\n\n  // Cancel editing instructions\n  const cancelEditInstructions = () => {\n    setShowInstructionsEditor(false);\n  };\n\n  // Send user message\n  const handleSendMessage = () => {\n    if (!inputValue.trim()) return;\n\n    // Create user message object\n    const userMessage = {\n      id: Date.now(),\n      sender: 'user',\n      type: messageType,\n      content: inputValue,\n      timestamp: new Date()\n    };\n\n    // Add message to chat\n    setMessages(prev => [...prev, userMessage]);\n\n    // Clear input field\n    setInputValue('');\n\n    // Process with AI\n    handleAiResponse(userMessage.content, userMessage.type);\n  };\n\n  // Handle key press (Enter to send)\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Get AI response\n  const handleAiResponse = async (userMessage, messageType) => {\n    setIsTyping(true);\n    try {\n      let responseContent;\n\n      // If we have a Gemini service, use it\n      if (geminiService) {\n        // For the first message, include roleplay instructions if they exist\n        if (!userMessage && roleplayInstructions) {\n          // Add it to the context for the AI but don't show it in chat\n          const initPrompt = `Initial scene: ${scenario.initialSituation}\\n\\nRoleplay instructions:\\n${roleplayInstructions}\\n\\nPlease respond with an opening for this scene, following the roleplay instructions but without mentioning them directly.`;\n          responseContent = await geminiService.generateGeneric(initPrompt);\n        } else {\n          responseContent = await geminiService.generateResponse(userMessage, messageType);\n        }\n      } else {\n        // Fallback for development\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        responseContent = \"This is a placeholder response. In the full implementation, this would be a response from Google's Gemini LLM, responding appropriately to your character's situation.\";\n      }\n      const aiMessage = {\n        id: Date.now(),\n        sender: 'ai',\n        type: 'dialogue',\n        content: responseContent,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n\n      // Add error message\n      const errorMessage = {\n        id: Date.now(),\n        sender: 'system',\n        type: 'error',\n        content: 'There was an error getting a response. Please try again.',\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  // Format message based on type\n  const formatMessage = message => {\n    switch (message.type) {\n      case 'system':\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"system-message\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 16\n        }, this);\n      case 'error':\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 16\n        }, this);\n      case 'dialogue':\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `dialogue-message ${message.sender}`,\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 16\n        }, this);\n      case 'action':\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `action-message ${message.sender}`,\n          children: [\"*\", message.content, \"*\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 16\n        }, this);\n      case 'thought':\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `thought-message ${message.sender}`,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 67\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `message ${message.sender}`,\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: (scenario === null || scenario === void 0 ? void 0 : scenario.title) || 'Untitled Scenario'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn reset-chat-btn\",\n          onClick: onReset,\n          title: \"Start Over\",\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn\",\n          onClick: () => setShowInstructionsEditor(true),\n          title: \"View/Edit Roleplay Instructions\",\n          children: /*#__PURE__*/_jsxDEV(ScrollText, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn\",\n          children: /*#__PURE__*/_jsxDEV(Settings, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn\",\n          children: /*#__PURE__*/_jsxDEV(Music, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-btn\",\n          children: /*#__PURE__*/_jsxDEV(BookOpen, {\n            size: 18\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-wrapper ${message.sender}`,\n        children: [formatMessage(message), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"timestamp\",\n          children: message.timestamp.toLocaleTimeString([], {\n            hour: '2-digit',\n            minute: '2-digit'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-type-selector\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `type-btn ${messageType === 'dialogue' ? 'active' : ''}`,\n        onClick: () => setMessageType('dialogue'),\n        children: \"Dialogue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `type-btn ${messageType === 'action' ? 'active' : ''}`,\n        onClick: () => setMessageType('action'),\n        children: \"Action\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `type-btn ${messageType === 'thought' ? 'active' : ''}`,\n        onClick: () => setMessageType('thought'),\n        children: \"Thought\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        onKeyDown: handleKeyPress,\n        placeholder: messageType === 'dialogue' ? 'Type your dialogue...' : messageType === 'action' ? 'Describe your action...' : 'Share your thoughts...',\n        rows: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"send-btn\",\n        onClick: handleSendMessage,\n        children: /*#__PURE__*/_jsxDEV(Send, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), showInstructionsEditor && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: /*#__PURE__*/_jsxDEV(RoleplayInstructions, {\n          instructions: roleplayInstructions,\n          onSave: saveRoleplayInstructions,\n          onCancel: cancelEditInstructions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"hQvWIILS2mystEnch+x97rKQW88=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Send","Settings","Music","BookOpen","ScrollText","RoleplayInstructions","jsxDEV","_jsxDEV","ChatInterface","character","scenario","onSaveChat","geminiService","onReset","_s","messages","setMessages","inputValue","setInputValue","isTyping","setIsTyping","messageType","setMessageType","showInstructionsEditor","setShowInstructionsEditor","roleplayInstructions","setRoleplayInstructions","messagesEndRef","length","initialMessage","id","Date","now","type","content","initialSituation","timestamp","handleAiResponse","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","saveRoleplayInstructions","instructions","updateInstructions","cancelEditInstructions","handleSendMessage","trim","userMessage","sender","prev","handleKeyPress","e","key","shiftKey","preventDefault","responseContent","initPrompt","generateGeneric","generateResponse","Promise","resolve","setTimeout","aiMessage","error","console","errorMessage","formatMessage","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","onClick","size","map","toLocaleTimeString","hour","minute","ref","value","onChange","target","onKeyDown","placeholder","rows","onSave","onCancel","_c","$RefreshReg$"],"sources":["/Users/ryanmorrison/Code/narrativeforge/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Send, Settings, Music, BookOpen, ScrollText } from 'lucide-react';\nimport RoleplayInstructions from './RoleplayInstructions';\n\nconst ChatInterface = ({ character, scenario, onSaveChat, geminiService, onReset }) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [messageType, setMessageType] = useState('dialogue'); // dialogue, action, thought\n  const [showInstructionsEditor, setShowInstructionsEditor] = useState(false);\n  const [roleplayInstructions, setRoleplayInstructions] = useState(scenario?.roleplayInstructions || '');\n  const messagesEndRef = useRef(null);\n  \n  // When scenario changes, update the roleplay instructions\n  useEffect(() => {\n    if (scenario && scenario.roleplayInstructions) {\n      setRoleplayInstructions(scenario.roleplayInstructions);\n    }\n  }, [scenario]);\n  \n  // Initial system message when the scenario begins\n  useEffect(() => {\n    if (scenario && !messages.length) {\n      // Create initial narrative message describing the scenario\n      const initialMessage = {\n        id: Date.now(),\n        type: 'system',\n        content: scenario.initialSituation,\n        timestamp: new Date()\n      };\n      \n      setMessages([initialMessage]);\n      \n      // If there are roleplay instructions, set them but DON'T add them as a visible message\n      if (scenario.roleplayInstructions) {\n        setRoleplayInstructions(scenario.roleplayInstructions);\n      }\n      \n      // Simulate AI thinking and then responding to set the scene\n      handleAiResponse();\n    }\n  }, [scenario]);\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  // Save roleplay instructions\n  const saveRoleplayInstructions = (instructions) => {\n    setRoleplayInstructions(instructions);\n    setShowInstructionsEditor(false);\n    \n    // Don't add to visible messages, but update the AI context\n    if (geminiService) {\n      geminiService.updateInstructions(instructions);\n    }\n  };\n\n  // Cancel editing instructions\n  const cancelEditInstructions = () => {\n    setShowInstructionsEditor(false);\n  };\n\n  // Send user message\n  const handleSendMessage = () => {\n    if (!inputValue.trim()) return;\n    \n    // Create user message object\n    const userMessage = {\n      id: Date.now(),\n      sender: 'user',\n      type: messageType,\n      content: inputValue,\n      timestamp: new Date()\n    };\n    \n    // Add message to chat\n    setMessages(prev => [...prev, userMessage]);\n    \n    // Clear input field\n    setInputValue('');\n    \n    // Process with AI\n    handleAiResponse(userMessage.content, userMessage.type);\n  };\n\n  // Handle key press (Enter to send)\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Get AI response\n  const handleAiResponse = async (userMessage, messageType) => {\n    setIsTyping(true);\n    \n    try {\n      let responseContent;\n      \n      // If we have a Gemini service, use it\n      if (geminiService) {\n        // For the first message, include roleplay instructions if they exist\n        if (!userMessage && roleplayInstructions) {\n          // Add it to the context for the AI but don't show it in chat\n          const initPrompt = `Initial scene: ${scenario.initialSituation}\\n\\nRoleplay instructions:\\n${roleplayInstructions}\\n\\nPlease respond with an opening for this scene, following the roleplay instructions but without mentioning them directly.`;\n          responseContent = await geminiService.generateGeneric(initPrompt);\n        } else {\n          responseContent = await geminiService.generateResponse(userMessage, messageType);\n        }\n      } else {\n        // Fallback for development\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        responseContent = \"This is a placeholder response. In the full implementation, this would be a response from Google's Gemini LLM, responding appropriately to your character's situation.\";\n      }\n      \n      const aiMessage = {\n        id: Date.now(),\n        sender: 'ai',\n        type: 'dialogue',\n        content: responseContent,\n        timestamp: new Date()\n      };\n      \n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      \n      // Add error message\n      const errorMessage = {\n        id: Date.now(),\n        sender: 'system',\n        type: 'error',\n        content: 'There was an error getting a response. Please try again.',\n        timestamp: new Date()\n      };\n      \n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  // Format message based on type\n  const formatMessage = (message) => {\n    switch (message.type) {\n      case 'system':\n        return <p className=\"system-message\">{message.content}</p>;\n      case 'error':\n        return <p className=\"error-message\">{message.content}</p>;\n      case 'dialogue':\n        return <p className={`dialogue-message ${message.sender}`}>{message.content}</p>;\n      case 'action':\n        return <p className={`action-message ${message.sender}`}>*{message.content}*</p>;\n      case 'thought':\n        return <p className={`thought-message ${message.sender}`}><i>{message.content}</i></p>;\n      default:\n        return <p className={`message ${message.sender}`}>{message.content}</p>;\n    }\n  };\n\n  return (\n    <div className=\"chat-interface\">\n      <div className=\"chat-header\">\n        <h2>{scenario?.title || 'Untitled Scenario'}</h2>\n        <div className=\"chat-controls\">\n          <button \n            className=\"control-btn reset-chat-btn\" \n            onClick={onReset}\n            title=\"Start Over\"\n          >\n            Start Over\n          </button>\n          <button \n            className=\"control-btn\" \n            onClick={() => setShowInstructionsEditor(true)}\n            title=\"View/Edit Roleplay Instructions\"\n          >\n            <ScrollText size={18} />\n          </button>\n          <button className=\"control-btn\">\n            <Settings size={18} />\n          </button>\n          <button className=\"control-btn\">\n            <Music size={18} />\n          </button>\n          <button className=\"control-btn\">\n            <BookOpen size={18} />\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"messages-container\">\n        {messages.map(message => (\n          <div key={message.id} className={`message-wrapper ${message.sender}`}>\n            {formatMessage(message)}\n            <span className=\"timestamp\">\n              {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n            </span>\n          </div>\n        ))}\n        \n        {isTyping && (\n          <div className=\"typing-indicator\">\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      <div className=\"message-type-selector\">\n        <button \n          className={`type-btn ${messageType === 'dialogue' ? 'active' : ''}`}\n          onClick={() => setMessageType('dialogue')}\n        >\n          Dialogue\n        </button>\n        <button \n          className={`type-btn ${messageType === 'action' ? 'active' : ''}`}\n          onClick={() => setMessageType('action')}\n        >\n          Action\n        </button>\n        <button \n          className={`type-btn ${messageType === 'thought' ? 'active' : ''}`}\n          onClick={() => setMessageType('thought')}\n        >\n          Thought\n        </button>\n      </div>\n      \n      <div className=\"input-area\">\n        <textarea \n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onKeyDown={handleKeyPress}\n          placeholder={messageType === 'dialogue' ? 'Type your dialogue...' : \n                       messageType === 'action' ? 'Describe your action...' : 'Share your thoughts...'}\n          rows={3}\n        />\n        <button className=\"send-btn\" onClick={handleSendMessage}>\n          <Send size={20} />\n        </button>\n      </div>\n\n      {/* Roleplay Instructions Modal */}\n      {showInstructionsEditor && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <RoleplayInstructions \n              instructions={roleplayInstructions}\n              onSave={saveRoleplayInstructions}\n              onCancel={cancelEditInstructions}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}