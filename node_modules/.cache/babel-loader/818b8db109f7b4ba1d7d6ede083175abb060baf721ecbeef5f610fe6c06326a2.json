{"ast":null,"code":"/**\n * Service for handling interactions with ElevenLabs Text-to-Speech API\n */\nclass ElevenLabsService {\n  /**\n   * Creates an instance of ElevenLabsService.\n   * @param {string} apiKey - Your ElevenLabs API key\n   */\n  constructor(apiKey) {\n    if (!apiKey) {\n      throw new Error(\"API key is required for ElevenLabsService\");\n    }\n    this.apiKey = apiKey;\n    this.baseUrl = 'https://api.elevenlabs.io/v1';\n\n    // Default voices - replace these IDs with actual voices from your ElevenLabs account\n    this.voices = {\n      narrator: 'pNInz6obpgDQGcFmaJgB',\n      // Adam - good for narration\n      alex: 'ErXwobaYiN019PkySvjV',\n      // Antoni - good for a deep male protagonist\n      female: 'EXAVITQu4vr4xnSDxMaL' // Bella - for female characters\n    };\n\n    // Track current audio playing\n    this.currentAudio = null;\n  }\n\n  /**\n   * Fetch available voices from the ElevenLabs API\n   * @returns {Promise<Array>} - List of available voices\n   */\n  async getVoices() {\n    try {\n      const response = await fetch(`${this.baseUrl}/voices`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'xi-api-key': this.apiKey\n        }\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API error: ${response.status} - ${errorText}`);\n      }\n      const data = await response.json();\n      return data.voices || [];\n    } catch (error) {\n      console.error('Error fetching ElevenLabs voices:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Convert text to speech using ElevenLabs API\n   * @param {string} text - The text to convert to speech\n   * @param {string} voiceId - The voice ID to use\n   * @param {Object} options - Additional options for the TTS request\n   * @returns {Promise<Blob>} - Audio blob containing the generated speech\n   */\n  async textToSpeech(text, voiceId, options = {}) {\n    // Default options for voice generation\n    const defaultOptions = {\n      stability: 0.5,\n      // How stable/consistent the voice is (0-1)\n      similarity_boost: 0.75,\n      // How much to prioritize sounding like the original voice (0-1)\n      style: 0.0,\n      // Speaking style (0-1)\n      use_speaker_boost: true // Enhanced clarity and target speaker similarity\n    };\n    const requestOptions = {\n      ...defaultOptions,\n      ...options\n    };\n    try {\n      // Process text for better speech output\n      const processedText = this.preprocessText(text);\n\n      // Make the API request\n      const response = await fetch(`${this.baseUrl}/text-to-speech/${voiceId}`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'audio/mpeg',\n          'xi-api-key': this.apiKey,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: processedText,\n          model_id: \"eleven_turbo_v2\",\n          // Can be changed to other models\n          voice_settings: {\n            stability: requestOptions.stability,\n            similarity_boost: requestOptions.similarity_boost,\n            style: requestOptions.style,\n            use_speaker_boost: requestOptions.use_speaker_boost\n          }\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API error: ${response.status} - ${errorText}`);\n      }\n\n      // Return the audio blob\n      return await response.blob();\n    } catch (error) {\n      console.error('Error generating speech:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process text for better speech quality\n   * @param {string} text - Raw text to process\n   * @returns {string} - Processed text optimized for TTS\n   */\n  preprocessText(text) {\n    if (!text) return '';\n\n    // Remove excess whitespace\n    let processed = text.trim().replace(/\\s+/g, ' ');\n\n    // Replace markdown formatting\n    processed = processed.replace(/\\*\\*(.*?)\\*\\*/g, '$1'); // Bold\n    processed = processed.replace(/\\*(.*?)\\*/g, '$1'); // Italic\n    processed = processed.replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1'); // Links\n\n    // Add pauses with commas\n    processed = processed.replace(/([.!?])\\s+/g, '$1, ');\n\n    // Add pauses after blockquotes\n    processed = processed.replace(/>\\s*(.*?)(\\n|$)/g, '$1, ');\n\n    // Handle quoted speech carefully (keep quotation marks for proper intonation)\n\n    // Limit length if needed\n    const MAX_LENGTH = 5000;\n    if (processed.length > MAX_LENGTH) {\n      processed = processed.substring(0, MAX_LENGTH) + '...';\n    }\n    return processed;\n  }\n\n  /**\n   * Play audio from a blob\n   * @param {Blob} audioBlob - The audio blob to play\n   * @returns {HTMLAudioElement} - The audio element playing the sound\n   */\n  playAudio(audioBlob) {\n    // If there's already audio playing, stop it\n    if (this.currentAudio) {\n      this.currentAudio.pause();\n      URL.revokeObjectURL(this.currentAudio.src);\n    }\n\n    // Create audio URL from blob\n    const audioUrl = URL.createObjectURL(audioBlob);\n    const audio = new Audio(audioUrl);\n\n    // Set up event handlers\n    audio.onended = () => {\n      URL.revokeObjectURL(audioUrl);\n      if (this.currentAudio === audio) {\n        this.currentAudio = null;\n      }\n    };\n    audio.onerror = error => {\n      console.error('Audio playback error:', error);\n      URL.revokeObjectURL(audioUrl);\n      this.currentAudio = null;\n    };\n\n    // Start playing\n    audio.play().catch(error => {\n      console.error('Failed to play audio:', error);\n    });\n\n    // Store reference to current audio\n    this.currentAudio = audio;\n    return audio;\n  }\n\n  /**\n   * Stop any currently playing audio\n   */\n  stopAudio() {\n    if (this.currentAudio) {\n      this.currentAudio.pause();\n      URL.revokeObjectURL(this.currentAudio.src);\n      this.currentAudio = null;\n    }\n  }\n\n  /**\n   * Convert speech to text using ElevenLabs Scribe API\n   * @param {Blob} audioBlob - Audio blob containing the speech to transcribe\n   * @returns {Promise<string>} - Transcribed text\n   */\n  async speechToText(audioBlob) {\n    try {\n      // Create FormData\n      const formData = new FormData();\n      formData.append('audio', audioBlob, 'recorded_audio.webm');\n\n      // Make API request\n      const response = await fetch('https://api.elevenlabs.io/v1/speech-to-text', {\n        method: 'POST',\n        headers: {\n          'xi-api-key': this.apiKey,\n          'Accept': 'application/json'\n        },\n        body: formData\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API error: ${response.status} - ${errorText}`);\n      }\n      const data = await response.json();\n      return data.text || '';\n    } catch (error) {\n      console.error('Error converting speech to text:', error);\n      throw error;\n    }\n  }\n}\nexport default ElevenLabsService;","map":{"version":3,"names":["ElevenLabsService","constructor","apiKey","Error","baseUrl","voices","narrator","alex","female","currentAudio","getVoices","response","fetch","method","headers","ok","errorText","text","status","data","json","error","console","textToSpeech","voiceId","options","defaultOptions","stability","similarity_boost","style","use_speaker_boost","requestOptions","processedText","preprocessText","body","JSON","stringify","model_id","voice_settings","blob","processed","trim","replace","MAX_LENGTH","length","substring","playAudio","audioBlob","pause","URL","revokeObjectURL","src","audioUrl","createObjectURL","audio","Audio","onended","onerror","play","catch","stopAudio","speechToText","formData","FormData","append"],"sources":["/Users/ryanmorrison/Code/narrativeforge/src/services/elevenLabsService.js"],"sourcesContent":["/**\n * Service for handling interactions with ElevenLabs Text-to-Speech API\n */\nclass ElevenLabsService {\n  /**\n   * Creates an instance of ElevenLabsService.\n   * @param {string} apiKey - Your ElevenLabs API key\n   */\n  constructor(apiKey) {\n    if (!apiKey) {\n      throw new Error(\"API key is required for ElevenLabsService\");\n    }\n    this.apiKey = apiKey;\n    this.baseUrl = 'https://api.elevenlabs.io/v1';\n    \n    // Default voices - replace these IDs with actual voices from your ElevenLabs account\n    this.voices = {\n      narrator: 'pNInz6obpgDQGcFmaJgB', // Adam - good for narration\n      alex: 'ErXwobaYiN019PkySvjV',      // Antoni - good for a deep male protagonist\n      female: 'EXAVITQu4vr4xnSDxMaL'     // Bella - for female characters\n    };\n    \n    // Track current audio playing\n    this.currentAudio = null;\n  }\n\n  /**\n   * Fetch available voices from the ElevenLabs API\n   * @returns {Promise<Array>} - List of available voices\n   */\n  async getVoices() {\n    try {\n      const response = await fetch(`${this.baseUrl}/voices`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'xi-api-key': this.apiKey\n        }\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      return data.voices || [];\n    } catch (error) {\n      console.error('Error fetching ElevenLabs voices:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Convert text to speech using ElevenLabs API\n   * @param {string} text - The text to convert to speech\n   * @param {string} voiceId - The voice ID to use\n   * @param {Object} options - Additional options for the TTS request\n   * @returns {Promise<Blob>} - Audio blob containing the generated speech\n   */\n  async textToSpeech(text, voiceId, options = {}) {\n    // Default options for voice generation\n    const defaultOptions = {\n      stability: 0.5,         // How stable/consistent the voice is (0-1)\n      similarity_boost: 0.75, // How much to prioritize sounding like the original voice (0-1)\n      style: 0.0,             // Speaking style (0-1)\n      use_speaker_boost: true // Enhanced clarity and target speaker similarity\n    };\n\n    const requestOptions = { ...defaultOptions, ...options };\n\n    try {\n      // Process text for better speech output\n      const processedText = this.preprocessText(text);\n      \n      // Make the API request\n      const response = await fetch(`${this.baseUrl}/text-to-speech/${voiceId}`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'audio/mpeg',\n          'xi-api-key': this.apiKey,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: processedText,\n          model_id: \"eleven_turbo_v2\", // Can be changed to other models\n          voice_settings: {\n            stability: requestOptions.stability,\n            similarity_boost: requestOptions.similarity_boost,\n            style: requestOptions.style,\n            use_speaker_boost: requestOptions.use_speaker_boost\n          }\n        })\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API error: ${response.status} - ${errorText}`);\n      }\n\n      // Return the audio blob\n      return await response.blob();\n    } catch (error) {\n      console.error('Error generating speech:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process text for better speech quality\n   * @param {string} text - Raw text to process\n   * @returns {string} - Processed text optimized for TTS\n   */\n  preprocessText(text) {\n    if (!text) return '';\n    \n    // Remove excess whitespace\n    let processed = text.trim().replace(/\\s+/g, ' ');\n    \n    // Replace markdown formatting\n    processed = processed.replace(/\\*\\*(.*?)\\*\\*/g, '$1'); // Bold\n    processed = processed.replace(/\\*(.*?)\\*/g, '$1');     // Italic\n    processed = processed.replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1'); // Links\n    \n    // Add pauses with commas\n    processed = processed.replace(/([.!?])\\s+/g, '$1, ');\n    \n    // Add pauses after blockquotes\n    processed = processed.replace(/>\\s*(.*?)(\\n|$)/g, '$1, ');\n    \n    // Handle quoted speech carefully (keep quotation marks for proper intonation)\n    \n    // Limit length if needed\n    const MAX_LENGTH = 5000;\n    if (processed.length > MAX_LENGTH) {\n      processed = processed.substring(0, MAX_LENGTH) + '...';\n    }\n    \n    return processed;\n  }\n\n  /**\n   * Play audio from a blob\n   * @param {Blob} audioBlob - The audio blob to play\n   * @returns {HTMLAudioElement} - The audio element playing the sound\n   */\n  playAudio(audioBlob) {\n    // If there's already audio playing, stop it\n    if (this.currentAudio) {\n      this.currentAudio.pause();\n      URL.revokeObjectURL(this.currentAudio.src);\n    }\n    \n    // Create audio URL from blob\n    const audioUrl = URL.createObjectURL(audioBlob);\n    const audio = new Audio(audioUrl);\n    \n    // Set up event handlers\n    audio.onended = () => {\n      URL.revokeObjectURL(audioUrl);\n      if (this.currentAudio === audio) {\n        this.currentAudio = null;\n      }\n    };\n    \n    audio.onerror = (error) => {\n      console.error('Audio playback error:', error);\n      URL.revokeObjectURL(audioUrl);\n      this.currentAudio = null;\n    };\n    \n    // Start playing\n    audio.play().catch(error => {\n      console.error('Failed to play audio:', error);\n    });\n    \n    // Store reference to current audio\n    this.currentAudio = audio;\n    \n    return audio;\n  }\n\n  /**\n   * Stop any currently playing audio\n   */\n  stopAudio() {\n    if (this.currentAudio) {\n      this.currentAudio.pause();\n      URL.revokeObjectURL(this.currentAudio.src);\n      this.currentAudio = null;\n    }\n  }\n  \n  /**\n   * Convert speech to text using ElevenLabs Scribe API\n   * @param {Blob} audioBlob - Audio blob containing the speech to transcribe\n   * @returns {Promise<string>} - Transcribed text\n   */\n  async speechToText(audioBlob) {\n    try {\n      // Create FormData\n      const formData = new FormData();\n      formData.append('audio', audioBlob, 'recorded_audio.webm');\n      \n      // Make API request\n      const response = await fetch('https://api.elevenlabs.io/v1/speech-to-text', {\n        method: 'POST',\n        headers: {\n          'xi-api-key': this.apiKey,\n          'Accept': 'application/json'\n        },\n        body: formData\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`API error: ${response.status} - ${errorText}`);\n      }\n\n      const data = await response.json();\n      return data.text || '';\n    } catch (error) {\n      console.error('Error converting speech to text:', error);\n      throw error;\n    }\n  }\n}\n\nexport default ElevenLabsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}