{"ast":null,"code":"var _jsxFileName = \"/Users/ryanmorrison/Code/narrativeforge/src/components/SocialMediaMessage.js\";\nimport React from 'react';\n\n/**\n * Component for rendering social media messages in a platform-specific format\n * \n * @param {Object} props - Component props\n * @param {string} props.content - The social media content to render\n * @returns {JSX.Element} - Rendered social media message\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocialMediaMessage = ({\n  content\n}) => {\n  if (!content || typeof content !== 'string') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"social-media-content\",\n      children: \"Invalid content\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Platform-specific styling information\n  const platformStyles = {\n    'Instagram': {\n      className: 'instagram-notification',\n      icon: 'üì±',\n      color: 'linear-gradient(45deg, #833ab4, #fd1d1d, #fcb045)'\n    },\n    'TikTok': {\n      className: 'tiktok-notification',\n      icon: 'üéµ',\n      color: '#25F4EE'\n    },\n    'YouTube': {\n      className: 'youtube-notification',\n      icon: '‚ñ∂Ô∏è',\n      color: '#FF0000'\n    },\n    'Twitter': {\n      className: 'twitter-notification',\n      icon: 'üê¶',\n      color: '#1DA1F2'\n    },\n    'Snapchat': {\n      className: 'snapchat-notification',\n      icon: 'üëª',\n      color: '#FFFC00'\n    }\n  };\n\n  // Split the content by platform markers\n  const platformPattern = /\\[PLATFORM:(Instagram|TikTok|YouTube|Twitter|Snapchat)\\]/g;\n\n  // Find all platform sections in the content\n  const platformMatches = [...content.matchAll(platformPattern)];\n  if (platformMatches.length === 0) {\n    // If no platform markers found, render as a simple message\n    const formattedContent = formatMessageLine(content);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"social-media-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"generic-notification\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          dangerouslySetInnerHTML: {\n            __html: formattedContent\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Build an array of platform sections\n  const platformSections = [];\n  for (let i = 0; i < platformMatches.length; i++) {\n    const match = platformMatches[i];\n    const platform = match[1];\n    const startIndex = match.index;\n\n    // Find the text for this platform's notification\n    const endIndex = i < platformMatches.length - 1 ? platformMatches[i + 1].index : content.length;\n    let platformContent = content.substring(startIndex, endIndex);\n\n    // Remove the platform marker\n    platformContent = platformContent.replace(platformPattern, '');\n\n    // Split into notification lines and format\n    const notificationLines = platformContent.split('\\n').filter(line => line.trim() !== '').map(line => formatMessageLine(line));\n\n    // Get the style information for this platform\n    const style = platformStyles[platform] || {\n      className: 'generic-notification',\n      icon: 'üì±',\n      color: '#808080'\n    };\n\n    // Create platform section\n    platformSections.push(/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `platform-section ${style.className}`,\n      style: {\n        borderLeftColor: style.color\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"platform-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"platform-icon\",\n          children: style.icon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"platform-name\",\n          children: platform\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"platform-content\",\n        children: notificationLines.map((line, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-line\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            dangerouslySetInnerHTML: {\n              __html: line\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)\n        }, `notification-${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, `platform-${i}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"social-media-content\",\n    children: platformSections\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 10\n  }, this);\n};\n\n/**\n * Format a single line of message content with proper styling\n * \n * @param {string} line - Line to format\n * @returns {string} - Formatted HTML content\n */\n_c = SocialMediaMessage;\nfunction formatMessageLine(line) {\n  if (!line || typeof line !== 'string') return '';\n  return line.replace(/@([a-zA-Z0-9_]+)/g, '<span class=\"handle\">@$1</span>').replace(/\"([^\"]+)\"/g, '<span class=\"quote\">\"$1\"</span>').replace(/\\bviral\\b/gi, '<span class=\"highlight\">viral</span>').replace(/\\btrending\\b/gi, '<span class=\"highlight\">trending</span>').replace(/(\\d+)k?\\s*followers/gi, '$1k <span class=\"stat-label\">followers</span> üë•').replace(/(\\d+)k?\\s*likes/gi, '$1k <span class=\"stat-label\">likes</span> ‚ù§Ô∏è').replace(/(\\d+)k?\\s*views/gi, '$1k <span class=\"stat-label\">views</span> üëÅÔ∏è').replace(/(\\d+)k?\\s*shares/gi, '$1k <span class=\"stat-label\">shares</span> üîÑ').replace(/(\\d+)k?\\s*comments/gi, '$1k <span class=\"stat-label\">comments</span> üí¨');\n}\nexport default SocialMediaMessage;\nvar _c;\n$RefreshReg$(_c, \"SocialMediaMessage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SocialMediaMessage","content","className","children","fileName","_jsxFileName","lineNumber","columnNumber","platformStyles","icon","color","platformPattern","platformMatches","matchAll","length","formattedContent","formatMessageLine","dangerouslySetInnerHTML","__html","platformSections","i","match","platform","startIndex","index","endIndex","platformContent","substring","replace","notificationLines","split","filter","line","trim","map","style","push","borderLeftColor","j","_c","$RefreshReg$"],"sources":["/Users/ryanmorrison/Code/narrativeforge/src/components/SocialMediaMessage.js"],"sourcesContent":["import React from 'react';\n\n/**\n * Component for rendering social media messages in a platform-specific format\n * \n * @param {Object} props - Component props\n * @param {string} props.content - The social media content to render\n * @returns {JSX.Element} - Rendered social media message\n */\nconst SocialMediaMessage = ({ content }) => {\n  if (!content || typeof content !== 'string') {\n    return <div className=\"social-media-content\">Invalid content</div>;\n  }\n  \n  // Platform-specific styling information\n  const platformStyles = {\n    'Instagram': {\n      className: 'instagram-notification',\n      icon: 'üì±',\n      color: 'linear-gradient(45deg, #833ab4, #fd1d1d, #fcb045)'\n    },\n    'TikTok': {\n      className: 'tiktok-notification',\n      icon: 'üéµ',\n      color: '#25F4EE'\n    },\n    'YouTube': {\n      className: 'youtube-notification',\n      icon: '‚ñ∂Ô∏è',\n      color: '#FF0000'\n    },\n    'Twitter': {\n      className: 'twitter-notification',\n      icon: 'üê¶',\n      color: '#1DA1F2'\n    },\n    'Snapchat': {\n      className: 'snapchat-notification',\n      icon: 'üëª',\n      color: '#FFFC00'\n    }\n  };\n  \n  // Split the content by platform markers\n  const platformPattern = /\\[PLATFORM:(Instagram|TikTok|YouTube|Twitter|Snapchat)\\]/g;\n  \n  // Find all platform sections in the content\n  const platformMatches = [...content.matchAll(platformPattern)];\n  \n  if (platformMatches.length === 0) {\n    // If no platform markers found, render as a simple message\n    const formattedContent = formatMessageLine(content);\n    return (\n      <div className=\"social-media-content\">\n        <div className=\"generic-notification\">\n          <span dangerouslySetInnerHTML={{ __html: formattedContent }} />\n        </div>\n      </div>\n    );\n  }\n  \n  // Build an array of platform sections\n  const platformSections = [];\n  \n  for (let i = 0; i < platformMatches.length; i++) {\n    const match = platformMatches[i];\n    const platform = match[1];\n    const startIndex = match.index;\n    \n    // Find the text for this platform's notification\n    const endIndex = i < platformMatches.length - 1 ? platformMatches[i + 1].index : content.length;\n    let platformContent = content.substring(startIndex, endIndex);\n    \n    // Remove the platform marker\n    platformContent = platformContent.replace(platformPattern, '');\n    \n    // Split into notification lines and format\n    const notificationLines = platformContent.split('\\n')\n      .filter(line => line.trim() !== '')\n      .map(line => formatMessageLine(line));\n    \n    // Get the style information for this platform\n    const style = platformStyles[platform] || {\n      className: 'generic-notification',\n      icon: 'üì±',\n      color: '#808080'\n    };\n    \n    // Create platform section\n    platformSections.push(\n      <div \n        key={`platform-${i}`} \n        className={`platform-section ${style.className}`}\n        style={{ borderLeftColor: style.color }}\n      >\n        <div className=\"platform-header\">\n          <span className=\"platform-icon\">{style.icon}</span>\n          <span className=\"platform-name\">{platform}</span>\n        </div>\n        <div className=\"platform-content\">\n          {notificationLines.map((line, j) => (\n            <div key={`notification-${i}-${j}`} className=\"notification-line\">\n              <span dangerouslySetInnerHTML={{ __html: line }} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n  \n  return <div className=\"social-media-content\">{platformSections}</div>;\n};\n\n/**\n * Format a single line of message content with proper styling\n * \n * @param {string} line - Line to format\n * @returns {string} - Formatted HTML content\n */\nfunction formatMessageLine(line) {\n  if (!line || typeof line !== 'string') return '';\n  \n  return line\n    .replace(/@([a-zA-Z0-9_]+)/g, '<span class=\"handle\">@$1</span>')\n    .replace(/\"([^\"]+)\"/g, '<span class=\"quote\">\"$1\"</span>')\n    .replace(/\\bviral\\b/gi, '<span class=\"highlight\">viral</span>')\n    .replace(/\\btrending\\b/gi, '<span class=\"highlight\">trending</span>')\n    .replace(/(\\d+)k?\\s*followers/gi, '$1k <span class=\"stat-label\">followers</span> üë•')\n    .replace(/(\\d+)k?\\s*likes/gi, '$1k <span class=\"stat-label\">likes</span> ‚ù§Ô∏è')\n    .replace(/(\\d+)k?\\s*views/gi, '$1k <span class=\"stat-label\">views</span> üëÅÔ∏è')\n    .replace(/(\\d+)k?\\s*shares/gi, '$1k <span class=\"stat-label\">shares</span> üîÑ')\n    .replace(/(\\d+)k?\\s*comments/gi, '$1k <span class=\"stat-label\">comments</span> üí¨');\n}\n\nexport default SocialMediaMessage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}