import React, { useState, useEffect, useRef } from 'react';
import MobilePhoneUI from './MobilePhoneUI-improved';
import './ChatInterface.css';

const ChatInterface = ({ 
  character, 
  scenario, 
  geminiService, 
  elevenLabsService, 
  isVoiceEnabled,
  onSaveChat, 
  onReset 
}) => {
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [messageType, setMessageType] = useState('dialogue'); // dialogue, action, thought
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);
  
  // Phone UI state
  const [showPhoneView, setShowPhoneView] = useState(false);
  const [phoneMessages, setPhoneMessages] = useState([]);
  
  // Voice playback state
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentAudio, setCurrentAudio] = useState(null);
  const [lastPlayedMessageId, setLastPlayedMessageId] = useState(null);
  const [lastAIMessage, setLastAIMessage] = useState(null);

  // Initialize with system message
  useEffect(() => {
    if (character && scenario) {
      setMessages([
        {
          id: Date.now(),
          role: 'system',
          content: `Scenario initialized: ${scenario.title}. Character: ${character.name}. Ready to begin roleplay.`,
          timestamp: new Date().toISOString()
        }
      ]);
      
      // Generate initial AI response
      handleAIResponse();
    }
  }, [character, scenario]);

  // Scroll to bottom when messages update
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Update last AI message when messages change
  useEffect(() => {
    const aiMessages = messages.filter(msg => msg.role === 'assistant');
    if (aiMessages.length > 0) {
      setLastAIMessage(aiMessages[aiMessages.length - 1]);
    }
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // Generate and play voice for AI responses
  const playResponseVoice = async (text, messageId) => {
    if (!elevenLabsService || !isVoiceEnabled) return;
    
    try {
      setIsPlaying(true);
      setLastPlayedMessageId(messageId);
      
      // If there's already audio playing, stop it
      if (currentAudio) {
        elevenLabsService.stopAudio();
      }
      
      // Get the narrative voice
      const voiceId = elevenLabsService.voices.narrator;
      
      // Generate speech from text
      const audioBlob = await elevenLabsService.textToSpeech(text, voiceId);
      
      // Play the audio
      const audio = elevenLabsService.playAudio(audioBlob);
      setCurrentAudio(audio);
      
      // Handle end of playback
      audio.onended = () => {
        setIsPlaying(false);
        setCurrentAudio(null);
      };
      
      // Handle playback errors
      audio.onerror = () => {
        setIsPlaying(false);
        setCurrentAudio(null);
        console.error("Error during audio playback");
      };
    } catch (error) {
      console.error("Error playing voice response:", error);
      setIsPlaying(false);
      setCurrentAudio(null);
    }
  };

  const handleAIResponse = async () => {
    if (!geminiService) return;
    
    setIsLoading(true);
    
    try {
      // Let AI know we're starting
      const response = await geminiService.generateResponse("Let's begin the roleplay. Please set the scene based on the initial situation.", "system");
      
      const newMessageId = Date.now();
      const assistantMessage = {
        id: newMessageId,
        role: 'assistant',
        content: response,
        timestamp: new Date().toISOString()
      };
      
      setMessages(prev => [...prev, assistantMessage]);
      
      // Play voice if enabled
      if (isVoiceEnabled && elevenLabsService) {
        playResponseVoice(response, newMessageId);
      }
    } catch (error) {
      console.error('Error getting AI response:', error);
      setMessages(prev => [...prev, {
        id: Date.now(),
        role: 'system',
        content: 'Error: Could not generate AI response. Please check your API key or try again later.',
        timestamp: new Date().toISOString(),
        error: true
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim() || isLoading || !geminiService) return;
    
    // Check for phone-related commands
    const lowerInput = inputValue.toLowerCase();
    const isPhoneCommand = lowerInput.includes('check my phone') || 
                           lowerInput.includes('open my phone') ||
                           lowerInput.includes('look at my phone') ||
                           lowerInput.includes('check phone');
    
    const newMessage = {
      id: Date.now(),
      role: 'user',
      content: inputValue,
      type: messageType,
      timestamp: new Date().toISOString()
    };
    
    setMessages(prev => [...prev, newMessage]);
    setInputValue('');
    setIsLoading(true);
    
    try {
      // Handle phone commands differently
      if (isPhoneCommand) {
        // Get phone content from AI
        const phoneResponse = await geminiService.generateResponse(
          "Generate detailed social media notifications, messages, and content for my phone. Include TikTok, Instagram, YouTube, and direct messages. Format as separate notifications with usernames, timestamps, and content. Use the @blackberrysoul handle for my account. Make the content highly relevant to my current situation and progress as a musician.", 
          "system"
        );
        
        // Parse phone notifications
        const phoneNotification = {
          id: Date.now(),
          type: 'social',
          content: phoneResponse,
          timestamp: new Date()
        };
        
        setPhoneMessages([phoneNotification]);
        setShowPhoneView(true);
        
        // Add a simple confirmation message
        const confirmMessage = {
          id: Date.now(),
          role: 'assistant',
          content: "You check your phone.",
          timestamp: new Date().toISOString()
        };
        
        setMessages(prev => [...prev, confirmMessage]);
      } else {
        // Normal message processing
        const response = await geminiService.generateResponse(inputValue, messageType);
        
        const newMessageId = Date.now();
        const assistantMessage = {
          id: newMessageId,
          role: 'assistant',
          content: response,
          timestamp: new Date().toISOString()
        };
        
        setMessages(prev => [...prev, assistantMessage]);
        
        // Play voice if enabled
        if (isVoiceEnabled && elevenLabsService) {
          playResponseVoice(response, newMessageId);
        }
      }
    } catch (error) {
      console.error('Error getting AI response:', error);
      setMessages(prev => [...prev, {
        id: Date.now(),
        role: 'system',
        content: 'Error: Could not generate AI response. Please try again.',
        timestamp: new Date().toISOString(),
        error: true
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  // Handler for putting the phone away
  const handlePutPhoneAway = (message) => {
    setShowPhoneView(false);
    if (message && message !== 'What do you do?') {
      // Add a message about putting the phone away
      setMessages(prev => [...prev, {
        id: Date.now(),
        role: 'user',
        content: "Put phone away",
        type: 'action',
        timestamp: new Date().toISOString()
      }]);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Stop current audio playback
  const stopVoice = () => {
    if (elevenLabsService) {
      elevenLabsService.stopAudio();
      setIsPlaying(false);
      setCurrentAudio(null);
    }
  };

  return (
    <div className="chat-interface">
      <div className="chat-header">
        <div className="character-info">
          <h2>{character?.name || 'Unnamed Character'}</h2>
          <p className="scenario-title">{scenario?.title || 'Untitled Scenario'}</p>
        </div>
        <div className="chat-controls">
          <button className="save-btn" onClick={() => onSaveChat(messages)}>
            Save Chat
          </button>
          <button className="reset-btn" onClick={onReset}>
            Start Over
          </button>
        </div>
      </div>
      
      {/* Phone UI overlay */}
      {showPhoneView && (
        <div className="phone-overlay">
          <MobilePhoneUI 
            messages={phoneMessages}
            onSendMessage={handlePutPhoneAway}
          />
        </div>
      )}
      
      {/* Voice control panel - displays if voice is enabled */}
      {isVoiceEnabled && elevenLabsService && (
        <div className="voice-control-panel">
          <div className="voice-panel-label">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path>
              <path d="M19 10v2a7 7 0 0 1-14 0v-2"></path>
              <line x1="12" y1="19" x2="12" y2="23"></line>
              <line x1="8" y1="23" x2="16" y2="23"></line>
            </svg>
            Voice Enabled
          </div>
          {isPlaying ? (
            <button 
              className="voice-control-btn stop-voice"
              onClick={stopVoice}
              aria-label="Stop voice"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <rect x="6" y="6" width="12" height="12" rx="2" ry="2"></rect>
              </svg>
              Stop Voice
            </button>
          ) : lastAIMessage && (
            <button 
              className="voice-control-btn play-voice"
              onClick={() => playResponseVoice(lastAIMessage.content, lastAIMessage.id)}
              aria-label="Play voice"
            >
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <polygon points="5 3 19 12 5 21 5 3"></polygon>
              </svg>
              Play Response
            </button>
          )}
        </div>
      )}
      
      <div className="chat-messages">
        {messages.map((message, index) => (
          <div 
            key={message.id || index} 
            className={`message ${message.role === 'user' ? 'user-message' : message.role === 'assistant' ? 'ai-message' : 'system-message'} ${message.error ? 'error-message' : ''} ${message.id === lastPlayedMessageId && isPlaying ? 'currently-playing' : ''}`}
          >
            {message.role === 'user' && message.type && (
              <div className="message-type-tag">
                {message.type === 'dialogue' ? 'Dialogue' : 
                message.type === 'action' ? 'Action' : 
                message.type === 'thought' ? 'Thought' : 'Message'}
              </div>
            )}
            <div className="message-content">{message.content}</div>
            
            {/* Add visible voice controls for assistant messages */}
            {message.role === 'assistant' && isVoiceEnabled && elevenLabsService && (
              <div className="message-voice-controls">
                {message.id === lastPlayedMessageId && isPlaying ? (
                  <button 
                    className="message-voice-btn stop-voice"
                    onClick={stopVoice}
                    aria-label="Stop voice"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <rect x="6" y="6" width="12" height="12" rx="2" ry="2"></rect>
                    </svg>
                    Stop
                  </button>
                ) : (
                  <button 
                    className="message-voice-btn play-voice"
                    onClick={() => playResponseVoice(message.content, message.id)}
                    aria-label="Play voice"
                    disabled={isPlaying}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <polygon points="5 3 19 12 5 21 5 3"></polygon>
                    </svg>
                    Play
                  </button>
                )}
              </div>
            )}
          </div>
        ))}
        
        {isLoading && (
          <div className="loading-indicator">
            <div className="typing-indicator">
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>
      
      <div className="chat-input">
        <div className="message-type-selector">
          <button 
            className={`type-btn ${messageType === 'dialogue' ? 'active' : ''}`}
            onClick={() => setMessageType('dialogue')}
          >
            Dialogue
          </button>
          <button 
            className={`type-btn ${messageType === 'action' ? 'active' : ''}`}
            onClick={() => setMessageType('action')}
          >
            Action
          </button>
          <button 
            className={`type-btn ${messageType === 'thought' ? 'active' : ''}`}
            onClick={() => setMessageType('thought')}
          >
            Thought
          </button>
        </div>
        
        <div className="input-wrapper">
          <textarea 
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyDown={handleKeyPress}
            placeholder={messageType === 'dialogue' ? 'Type your dialogue...' : 
                        messageType === 'action' ? 'Describe your action...' : 
                        messageType === 'thought' ? 'Share your thoughts...' :
                        'Type your message...'}
            rows={3}
          />
          <div className="input-helper">
            {inputValue.length > 0 ? 'Press Enter to send or click the button' : ''}
          </div>
        </div>
        
        <button 
          className="send-btn"
          onClick={handleSendMessage}
          disabled={isLoading || !inputValue.trim()}
        >
          Send
        </button>
      </div>
    </div>
  );
};

export default ChatInterface;