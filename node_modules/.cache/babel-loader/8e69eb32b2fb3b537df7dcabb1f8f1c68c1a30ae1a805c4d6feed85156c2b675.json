{"ast":null,"code":"var _jsxFileName = \"/Users/ryanmorrison/Code/narrativeforge/src/components/ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatInterface.css';\nimport VoiceSelector from './VoiceSelector';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = ({\n  character,\n  scenario,\n  geminiService,\n  elevenLabsService,\n  isVoiceEnabled,\n  onSaveChat,\n  onReset\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [messageType, setMessageType] = useState('dialogue'); // dialogue, action, thought\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n\n  // Voice-related state\n  const [selectedVoice, setSelectedVoice] = useState(null);\n  const [showVoiceSelector, setShowVoiceSelector] = useState(false);\n  const [isPlayingVoice, setIsPlayingVoice] = useState(false);\n\n  // Initialize with system message\n  useEffect(() => {\n    if (character && scenario) {\n      // Clear any existing messages to prevent story contamination\n      setMessages([]);\n\n      // Small timeout to ensure everything is reset\n      setTimeout(() => {\n        setMessages([{\n          role: 'system',\n          content: `Scenario initialized: ${scenario.title || 'Untitled'}. Character: ${character.name || 'Unnamed'}. Ready to begin roleplay.`,\n          timestamp: new Date().toISOString()\n        }]);\n\n        // Generate initial AI response if geminiService is available\n        if (geminiService) {\n          // Make sure the service is properly initialized\n          geminiService.reset();\n          geminiService.initialize(character, scenario);\n          handleAIResponse();\n        }\n      }, 200);\n    }\n  }, [character, scenario]);\n\n  // Scroll to bottom when messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const handleAIResponse = async () => {\n    if (!geminiService) return;\n    setIsLoading(true);\n    try {\n      // Provide a very explicit instruction to start the roleplay correctly\n      const scenarioTitle = (scenario === null || scenario === void 0 ? void 0 : scenario.title) || 'Untitled';\n      const initialSituation = (scenario === null || scenario === void 0 ? void 0 : scenario.initialSituation) || 'Not specified';\n      const response = await geminiService.generateResponse(`Begin a new roleplay for \"${scenarioTitle}\" with NO references to any other stories or narratives. Set the scene EXACTLY as described in this initial situation: \"${initialSituation}\". Start the narrative at precisely this moment with no previous events assumed. DO NOT introduce elements from any other stories, scenarios, or previous conversations.`, \"system\");\n      const assistantMessage = {\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n\n      // Generate and play voice if enabled\n      if (isVoiceEnabled && elevenLabsService && selectedVoice) {\n        try {\n          setIsPlayingVoice(true);\n          const audioBlob = await elevenLabsService.textToSpeech(response, selectedVoice.voice_id);\n          elevenLabsService.playAudio(audioBlob);\n        } catch (voiceError) {\n          console.error('Error generating voice:', voiceError);\n        } finally {\n          setIsPlayingVoice(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        role: 'system',\n        content: 'Error: Could not generate AI response. Please check your API key or try again later.',\n        timestamp: new Date().toISOString(),\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading || !geminiService) return;\n    const newMessage = {\n      role: 'user',\n      content: inputValue,\n      type: messageType,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, newMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    try {\n      const response = await geminiService.generateResponse(inputValue, messageType);\n      const assistantMessage = {\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n\n      // Generate and play voice if enabled\n      if (isVoiceEnabled && elevenLabsService && selectedVoice) {\n        try {\n          setIsPlayingVoice(true);\n          const audioBlob = await elevenLabsService.textToSpeech(response, selectedVoice.voice_id);\n          elevenLabsService.playAudio(audioBlob);\n        } catch (voiceError) {\n          console.error('Error generating voice:', voiceError);\n        } finally {\n          setIsPlayingVoice(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        role: 'system',\n        content: 'Error: Could not generate AI response. Please try again.',\n        timestamp: new Date().toISOString(),\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Load available voices when ElevenLabs service is initialized\n  useEffect(() => {\n    if (elevenLabsService && isVoiceEnabled) {\n      const loadVoices = async () => {\n        try {\n          const voices = await elevenLabsService.getVoices();\n          if (voices.length > 0 && !selectedVoice) {\n            // Default to first voice\n            setSelectedVoice(voices[0]);\n          }\n        } catch (error) {\n          console.error('Error loading voices:', error);\n        }\n      };\n      loadVoices();\n    }\n  }, [elevenLabsService, isVoiceEnabled]);\n\n  // Handle selecting a voice\n  const handleSelectVoice = voice => {\n    setSelectedVoice(voice);\n    setShowVoiceSelector(false);\n  };\n\n  // Stop any playing audio when component unmounts\n  useEffect(() => {\n    return () => {\n      if (elevenLabsService) {\n        elevenLabsService.stopAudio();\n      }\n    };\n  }, [elevenLabsService]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"character-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: (character === null || character === void 0 ? void 0 : character.name) || 'Unnamed Character'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"scenario-title\",\n          children: (scenario === null || scenario === void 0 ? void 0 : scenario.title) || 'Untitled Scenario'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-controls\",\n        children: [isVoiceEnabled && elevenLabsService && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `voice-btn ${isPlayingVoice ? 'voice-playing' : ''}`,\n          onClick: () => setShowVoiceSelector(!showVoiceSelector),\n          title: \"Voice Settings\",\n          type: \"button\",\n          children: [isPlayingVoice ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"voice-playing-indicator\",\n            children: \"\\uD83D\\uDD0A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\uD83C\\uDFA4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 17\n          }, this), selectedVoice ? selectedVoice.name : 'Select Voice']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: () => typeof onSaveChat === 'function' && onSaveChat(messages),\n          type: \"button\",\n          children: \"Save Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-btn\",\n          onClick: onReset,\n          type: \"button\",\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), showVoiceSelector && elevenLabsService && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-selector-modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"voice-selector-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"voice-selector-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Select Voice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-voice-selector\",\n            onClick: () => setShowVoiceSelector(false),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(VoiceSelector, {\n          elevenLabsApiKey: elevenLabsService.apiKey,\n          selectedVoice: selectedVoice,\n          onSelectVoice: handleSelectVoice,\n          isLoading: isPlayingVoice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.role === 'user' ? 'user-message' : message.role === 'assistant' ? 'ai-message' : 'system-message'} ${message.error ? 'error-message' : ''}`,\n        children: [message.role === 'user' && message.type && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-type-tag\",\n          children: message.type === 'dialogue' ? 'Dialogue' : message.type === 'action' ? 'Action' : message.type === 'thought' ? 'Thought' : 'Message'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: message.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"typing-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-input-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-type-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `type-btn ${messageType === 'dialogue' ? 'active' : ''}`,\n            onClick: () => setMessageType('dialogue'),\n            children: \"Dialogue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `type-btn ${messageType === 'action' ? 'active' : ''}`,\n            onClick: () => setMessageType('action'),\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: `type-btn ${messageType === 'thought' ? 'active' : ''}`,\n            onClick: () => setMessageType('thought'),\n            children: \"Thought\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), isVoiceEnabled && elevenLabsService && isPlayingVoice && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"stop-voice-btn\",\n          onClick: () => elevenLabsService.stopAudio(),\n          title: \"Stop Voice\",\n          children: \"Stop Voice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: handleKeyPress,\n          placeholder: messageType === 'dialogue' ? 'Type your dialogue...' : messageType === 'action' ? 'Describe your action...' : messageType === 'thought' ? 'Share your thoughts...' : 'Type your message...',\n          rows: 3\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-helper\",\n          children: inputValue.length > 0 ? 'Press Enter to send or click the button' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"send-btn\",\n        onClick: handleSendMessage,\n        disabled: isLoading || !inputValue.trim(),\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"SYFQEf0KPxdqPuV5hPHz0PtyT8Q=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","VoiceSelector","jsxDEV","_jsxDEV","ChatInterface","character","scenario","geminiService","elevenLabsService","isVoiceEnabled","onSaveChat","onReset","_s","messages","setMessages","inputValue","setInputValue","messageType","setMessageType","isLoading","setIsLoading","messagesEndRef","selectedVoice","setSelectedVoice","showVoiceSelector","setShowVoiceSelector","isPlayingVoice","setIsPlayingVoice","setTimeout","role","content","title","name","timestamp","Date","toISOString","reset","initialize","handleAIResponse","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","scenarioTitle","initialSituation","response","generateResponse","assistantMessage","prev","audioBlob","textToSpeech","voice_id","playAudio","voiceError","console","error","handleSendMessage","trim","newMessage","type","handleKeyPress","e","key","shiftKey","preventDefault","loadVoices","voices","getVoices","length","handleSelectVoice","voice","stopAudio","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","elevenLabsApiKey","apiKey","onSelectVoice","map","message","index","ref","value","onChange","target","onKeyDown","placeholder","rows","disabled","_c","$RefreshReg$"],"sources":["/Users/ryanmorrison/Code/narrativeforge/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './ChatInterface.css';\nimport VoiceSelector from './VoiceSelector';\n\nconst ChatInterface = ({ character, scenario, geminiService, elevenLabsService, isVoiceEnabled, onSaveChat, onReset }) => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [messageType, setMessageType] = useState('dialogue'); // dialogue, action, thought\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  \n  // Voice-related state\n  const [selectedVoice, setSelectedVoice] = useState(null);\n  const [showVoiceSelector, setShowVoiceSelector] = useState(false);\n  const [isPlayingVoice, setIsPlayingVoice] = useState(false);\n\n  // Initialize with system message\n  useEffect(() => {\n    if (character && scenario) {\n      // Clear any existing messages to prevent story contamination\n      setMessages([]);\n      \n      // Small timeout to ensure everything is reset\n      setTimeout(() => {\n        setMessages([\n          {\n            role: 'system',\n            content: `Scenario initialized: ${scenario.title || 'Untitled'}. Character: ${character.name || 'Unnamed'}. Ready to begin roleplay.`,\n            timestamp: new Date().toISOString()\n          }\n        ]);\n        \n        // Generate initial AI response if geminiService is available\n        if (geminiService) {\n          // Make sure the service is properly initialized\n          geminiService.reset();\n          geminiService.initialize(character, scenario);\n          handleAIResponse();\n        }\n      }, 200);\n    }\n  }, [character, scenario]);\n\n  // Scroll to bottom when messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const handleAIResponse = async () => {\n    if (!geminiService) return;\n    \n    setIsLoading(true);\n    \n    try {\n      // Provide a very explicit instruction to start the roleplay correctly\n      const scenarioTitle = scenario?.title || 'Untitled';\n      const initialSituation = scenario?.initialSituation || 'Not specified';\n      \n      const response = await geminiService.generateResponse(\n        `Begin a new roleplay for \"${scenarioTitle}\" with NO references to any other stories or narratives. Set the scene EXACTLY as described in this initial situation: \"${initialSituation}\". Start the narrative at precisely this moment with no previous events assumed. DO NOT introduce elements from any other stories, scenarios, or previous conversations.`, \n        \"system\"\n      );\n      \n      const assistantMessage = {\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      };\n      \n      setMessages(prev => [...prev, assistantMessage]);\n      \n      // Generate and play voice if enabled\n      if (isVoiceEnabled && elevenLabsService && selectedVoice) {\n        try {\n          setIsPlayingVoice(true);\n          const audioBlob = await elevenLabsService.textToSpeech(response, selectedVoice.voice_id);\n          elevenLabsService.playAudio(audioBlob);\n        } catch (voiceError) {\n          console.error('Error generating voice:', voiceError);\n        } finally {\n          setIsPlayingVoice(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        role: 'system',\n        content: 'Error: Could not generate AI response. Please check your API key or try again later.',\n        timestamp: new Date().toISOString(),\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!inputValue.trim() || isLoading || !geminiService) return;\n    \n    const newMessage = {\n      role: 'user',\n      content: inputValue,\n      type: messageType,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages(prev => [...prev, newMessage]);\n    setInputValue('');\n    setIsLoading(true);\n    \n    try {\n      const response = await geminiService.generateResponse(inputValue, messageType);\n      \n      const assistantMessage = {\n        role: 'assistant',\n        content: response,\n        timestamp: new Date().toISOString()\n      };\n      \n      setMessages(prev => [...prev, assistantMessage]);\n      \n      // Generate and play voice if enabled\n      if (isVoiceEnabled && elevenLabsService && selectedVoice) {\n        try {\n          setIsPlayingVoice(true);\n          const audioBlob = await elevenLabsService.textToSpeech(response, selectedVoice.voice_id);\n          elevenLabsService.playAudio(audioBlob);\n        } catch (voiceError) {\n          console.error('Error generating voice:', voiceError);\n        } finally {\n          setIsPlayingVoice(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setMessages(prev => [...prev, {\n        role: 'system',\n        content: 'Error: Could not generate AI response. Please try again.',\n        timestamp: new Date().toISOString(),\n        error: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Load available voices when ElevenLabs service is initialized\n  useEffect(() => {\n    if (elevenLabsService && isVoiceEnabled) {\n      const loadVoices = async () => {\n        try {\n          const voices = await elevenLabsService.getVoices();\n          if (voices.length > 0 && !selectedVoice) {\n            // Default to first voice\n            setSelectedVoice(voices[0]);\n          }\n        } catch (error) {\n          console.error('Error loading voices:', error);\n        }\n      };\n      \n      loadVoices();\n    }\n  }, [elevenLabsService, isVoiceEnabled]);\n  \n  // Handle selecting a voice\n  const handleSelectVoice = (voice) => {\n    setSelectedVoice(voice);\n    setShowVoiceSelector(false);\n  };\n  \n  // Stop any playing audio when component unmounts\n  useEffect(() => {\n    return () => {\n      if (elevenLabsService) {\n        elevenLabsService.stopAudio();\n      }\n    };\n  }, [elevenLabsService]);\n  \n  return (\n    <div className=\"chat-interface\">\n      <div className=\"chat-header\">\n        <div className=\"character-info\">\n          <h2>{character?.name || 'Unnamed Character'}</h2>\n          <p className=\"scenario-title\">{scenario?.title || 'Untitled Scenario'}</p>\n        </div>\n        <div className=\"chat-controls\">\n          {isVoiceEnabled && elevenLabsService && (\n            <button \n              className={`voice-btn ${isPlayingVoice ? 'voice-playing' : ''}`}\n              onClick={() => setShowVoiceSelector(!showVoiceSelector)}\n              title=\"Voice Settings\"\n              type=\"button\"\n            >\n              {isPlayingVoice ? (\n                <span className=\"voice-playing-indicator\">🔊</span>\n              ) : (\n                <span>🎤</span>\n              )}\n              {selectedVoice ? selectedVoice.name : 'Select Voice'}\n            </button>\n          )}\n          <button \n            className=\"save-btn\" \n            onClick={() => typeof onSaveChat === 'function' && onSaveChat(messages)}\n            type=\"button\"\n          >\n            Save Chat\n          </button>\n          <button \n            className=\"reset-btn\" \n            onClick={onReset}\n            type=\"button\"\n          >\n            Start Over\n          </button>\n        </div>\n      </div>\n      \n      {showVoiceSelector && elevenLabsService && (\n        <div className=\"voice-selector-modal\">\n          <div className=\"voice-selector-content\">\n            <div className=\"voice-selector-header\">\n              <h3>Select Voice</h3>\n              <button \n                className=\"close-voice-selector\" \n                onClick={() => setShowVoiceSelector(false)}\n              >\n                ×\n              </button>\n            </div>\n            <VoiceSelector\n              elevenLabsApiKey={elevenLabsService.apiKey}\n              selectedVoice={selectedVoice}\n              onSelectVoice={handleSelectVoice}\n              isLoading={isPlayingVoice}\n            />\n          </div>\n        </div>\n      )}\n      \n      <div className=\"chat-messages\">\n        {messages.map((message, index) => (\n          <div \n            key={index} \n            className={`message ${message.role === 'user' ? 'user-message' : message.role === 'assistant' ? 'ai-message' : 'system-message'} ${message.error ? 'error-message' : ''}`}\n          >\n            {message.role === 'user' && message.type && (\n              <div className=\"message-type-tag\">\n                {message.type === 'dialogue' ? 'Dialogue' : \n                message.type === 'action' ? 'Action' : \n                message.type === 'thought' ? 'Thought' : 'Message'}\n              </div>\n            )}\n            <div className=\"message-content\">{message.content}</div>\n          </div>\n        ))}\n        \n        {isLoading && (\n          <div className=\"loading-indicator\">\n            <div className=\"typing-indicator\">\n              <span></span>\n              <span></span>\n              <span></span>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      <div className=\"chat-input\">\n        <div className=\"chat-input-controls\">\n          <div className=\"message-type-selector\">\n            <button \n              type=\"button\"\n              className={`type-btn ${messageType === 'dialogue' ? 'active' : ''}`}\n              onClick={() => setMessageType('dialogue')}\n            >\n              Dialogue\n            </button>\n            <button \n              type=\"button\"\n              className={`type-btn ${messageType === 'action' ? 'active' : ''}`}\n              onClick={() => setMessageType('action')}\n            >\n              Action\n            </button>\n            <button \n              type=\"button\"\n              className={`type-btn ${messageType === 'thought' ? 'active' : ''}`}\n              onClick={() => setMessageType('thought')}\n            >\n              Thought\n            </button>\n          </div>\n          \n          {isVoiceEnabled && elevenLabsService && isPlayingVoice && (\n            <button \n              type=\"button\"\n              className=\"stop-voice-btn\"\n              onClick={() => elevenLabsService.stopAudio()}\n              title=\"Stop Voice\"\n            >\n              Stop Voice\n            </button>\n          )}\n        </div>\n        \n        <div className=\"input-wrapper\">\n          <textarea \n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyDown={handleKeyPress}\n            placeholder={messageType === 'dialogue' ? 'Type your dialogue...' : \n                        messageType === 'action' ? 'Describe your action...' : \n                        messageType === 'thought' ? 'Share your thoughts...' :\n                        'Type your message...'}\n            rows={3}\n          />\n          <div className=\"input-helper\">\n            {inputValue.length > 0 ? 'Press Enter to send or click the button' : ''}\n          </div>\n        </div>\n        \n        <button \n          type=\"button\"\n          className=\"send-btn\"\n          onClick={handleSendMessage}\n          disabled={isLoading || !inputValue.trim()}\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}